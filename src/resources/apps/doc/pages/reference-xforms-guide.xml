<?xml version="1.0" encoding="windows-1252"?>
<!--
  Copyright (C) 2010 Orbeon, Inc.

  This program is free software; you can redistribute it and/or modify it under the terms of the
  GNU Lesser General Public License as published by the Free Software Foundation; either version
  2.1 of the License, or (at your option) any later version.

  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
  without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  See the GNU Lesser General Public License for more details.

  The full text of the license is available at http://www.gnu.org/copyleft/lesser.html
  -->
<document xmlns:p="http://www.orbeon.com/oxf/pipeline"
          xmlns:xforms="http://www.w3.org/2002/xforms"
          xmlns:xxforms="http://orbeon.org/oxf/xml/xforms"
          xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns:xhtml="http://www.w3.org/1999/xhtml"
          xmlns:ev="http://www.w3.org/2001/xml-events"
          xmlns:xi="http://www.w3.org/2001/XInclude" >
    <header>
        <title>XForms Reference: XForms Guide</title>
    </header>
    <body>
        <section>
            <title>Introduction</title>
            <p>
                Web applications use forms to collect data from users. Orbeon Forms's form handling capabilities are
                based on <link href="http://www.w3.org/MarkUp/Forms/">XForms</link>, namely the <a
                href="http://www.w3.org/TR/xforms11/">XForms 1.1 W3C Candidate Recommendation</a>. This section
                provides an introduction to XForms concepts and explains how to use XForms in your Orbeon Forms
                application.
            </p>
            <note>
                <p>
                    This document is considered a work in progress. While it does cover some generic features of XForms,
                    it focuses before all on features specific to the Orbeon Forms XForms engine. For more information
                    about XForms, please refer to the following resources:
                </p>
                <ul>
                    <li>
                        <a href="http://www.w3.org/TR/xforms11/">XForms 1.1 W3C Candidate Recommendation</a>
                    </li>
                    <li>
                        <a href="http://xformsinstitute.com/essentials/">XForms Essentials</a>, by
                        Micah Dubinko (also at <a
                        href="http://www.amazon.com/gp/product/0596003692/">Amazon</a>).
                    </li>
                    <li>
                        XForms: XML Powered Web Forms, by T. V. Raman (also at <a
                        href="http://www.amazon.com/gp/product/0321154991/">Amazon</a>).
                    </li>
                </ul>
                <p>
                    We also recommend that you follow the <a href="intro-tutorial">Orbeon Forms Tutorial</a> first!
                </p>
            </note>
            <p>
                This part of the XForms reference documentation focuses on standard XForms features provided by Orbeon
                Forms.
            </p>
        </section>
        <a name="introduction"/>
        <section>
            <title>About XForms</title>
            <section>
                <title>Origin, Today, and Tomorrow</title>
                <p>
                    XForms 1.0 has been designed by the W3C based on experience with HTML forms. It was promoted to the
                    rank of W3C Recommendation in October 2003, and a <a
                    href="http://www.w3.org/TR/2005/PER-xforms-20051006/">second edition</a> of the specification was
                    released in March 2006. The <a href="http://www.w3.org/MarkUp/Forms/">XForms Working Group at
                    W3C</a> is as of March 2009 working on XForms 1.1 implementations, and also looking at XForms 1.2
                    or XForms 2.0. For more information about XForms, please refer to the <a
                    href="home-faq#xforms">FAQ</a>.
                </p>
                <p>
                    Mainstream browsers (Internet Explorer, Firefox, Safari, Google Chrome, Opera) do not support XForms
                    natively, although XForms support in Mozilla is under way and plugins are available for Internet
                    Explorer. However you can leverage the benefits of XForms today by using an Ajax-based XForms
                    engine like the one provided in Orbeon Forms. The Orbeon Forms XForms engine transparently generates
                    HTML forms and performs the work that would be done by an XForms-compliant browser, and you can
                    leverage XForms today within the mainstream browsers that are already deployed in the marketplace.
                </p>
                <p>
                    For more information about the whys and therefores of server-side and Ajax-based XForms engines,
                    please refer to the <a href="home-faq#xforms-server-side">FAQ</a>.
                </p>
            </section>
            <section>
                <title>Benefits</title>
                <p>
                    Compared to HTML forms, XForms offers a higher level approach to forms. The benefits are that less
                    programming is needed (less JavaScript, and less
                    server-side programming), so forms are easier to create and modify. As an
                    illustration, let's consider some facets of XForms:
                </p>
                <ol>
                    <li>
                        <p>
                            <b>XML Representation of Forms.</b> XForms clearly defines how data
                            entered by the end-user is collected: it is stored in an XML document
                            called an XForms <i>instance</i>, an initially empty, "skeletal" XML
                            instance document that defines the structure of the data you wish to
                            collect from the user, which is afterwards filled out with information
                            collected from the user. For example, credit card information collected
                            on a web site can be structured as follows:
                        </p>
                        <xml-source>
                            <credit-card>
                                <type/>
                                <number/>
                                <expiration-month/>
                                <expiration-year/>
                            </credit-card>
                        </xml-source>
                        <p>
                            The outcome of the user filling out a form collecting this information
                            could be this complete XML document:
                        </p>
                        <xml-source>
                            <credit-card>
                                <type>visa</type>
                                <number>1234567812345678</number>
                                <expiration-month>8</expiration-month>
                                <expiration-year>2008</expiration-year>
                            </credit-card>
                        </xml-source>
                        <p>
                            An application using this data to do some processing (e.g. checking the
                            validity of the credit card) receives the above XML document. There is
                            no need to write code to go read HTTP request parameters, or to use a
                            framework performing this task: XForms does it all.
                        </p>
                    </li>
                    <li>
                        <p>
                            <b>Declarative Constraints and Validation.</b> More often than not,
                            there are constraints on the data that can be entered by the end-user.
                            For instance, in the example we just considered, the card number must
                            have 16 digits and the expiration month must be a number between 1 and
                            12. Traditionally code must be written to check for those constraints.
                            And more code must be written to handle error conditions (getting back
                            to the page displaying the form and showing the appropriate error
                            messages). All this is done is very simple and declarative way with
                            XForms. For instance, checking that the expiration month is valid number
                            between 1 and 12 can be done with:
                        </p>
                        <xml-source show-namespaces="false">
                            <xforms:bind nodeset="/credit-card/expiration-month" type="xs:integer" constraint=". >= 1 and 12 >= ."/>
                        </xml-source>
                        <p>
                            An error message can be attached to the "month" text field and if the
                            end-user enters an invalid month the XForms engine will notice that the
                            above constraint is not met and will display the error message. You do
                            not have to write any code for this to happen. We will see later how you
                            go about doing this with XForms in more details.
                        </p>
                    </li>
                    <li>
                        <p>
                            <b>Declarative Event Handling.</b> User interfaces need to react to
                            user event such as mouse clicks and character entry. With most UI
                            frameworks, developers must register event handlers and implement them
                            in JavaScript, Java, or other traditional imperative languages. With
                            XForms, a set of predefined event handlers and actions are available,
                            which cover a set of useful cases without requiring understanding the
                            complex syntax and semantic of JavaScript or Java. For example, to set a
                            value into an XForms instance, you write:
                        </p>
                        <xml-source show-namespaces="false">
                            <xforms:setvalue ref="/credit-card/expiration-month">11</xforms:setvalue>
                        </xml-source>
                        <p>
                            Once you have learned the simple built-in XForms actions, you can
                            combine them in sequences to obtain more complex behavior.
                        </p>
                    </li>
                </ol>
            </section>
            <!--
            <section>
                <title>Processing Model</title>
                <img print-format="pdf" src="../apps/doc/images/reference-xforms-model-controls.png" style="clear: both; float: right"/>
                <p>
                    XForms exposes two main components that are distinct but designed to work
                    closely with one another:
                </p>
                <ul>
                    <li>
                        <p>
                            <b>XForms models:</b> XForms models define the data that needs to be
                            captured as well as constraints on this data.
                        </p>
                    </li>
                    <li>
                        <p>
                            <b>XForms controls:</b> XForms controls are widgets, like a text field or a
                            drop down combo box. They are generally used in an XHTML page to define the
                            visual representation of a form.
                        </p>
                    </li>
                </ul>
                <img print-format="pdf" src="../apps/doc/images/reference-xforms-operation-model.png" style="clear: both; float: right"/>
                <p>
                    At a high level, an application interacts with an end-user through the
                    following steps:
                </p>
                <ol>
                    <li>
                        <p>
                            The application generates an XHTML page which contains XForms controls,
                            and provides one or more XForms models for that page.
                        </p>
                    </li>
                    <li>
                        <p>
                            The XForms engine processes the XForms controls and sends a HTML page to the
                            end-user's browser.
                        </p>
                    </li>
                    <li>
                        <p>
                            The end-user fills out the form.
                        </p>
                        </li>
                    <li>
                        <p>
                            The XForms engine creates an XML document (called the XForms instance)
                            based on the values entered by the end-user, and sends this document to the
                            application.
                        </p>
                    </li>
                    <li>
                        <p>
                            The application performs its business logic based on the submitted XForms
                            instance.
                        </p>
                    </li>
                </ol>
                <p>
                    Your role as the author of an Orbeon Forms application is:
                </p>
                <ul>
                    <li>
                        <p>
                            To provide one or more XForms models (step 1 above).
                        </p>
                    </li>
                    <li>
                        <p>
                            To provide the description of the form user interface using XForms
                            controls (step 1 above).
                        </p>
                    </li>
                    <li>
                        <p>
                            To respond to the submission of an XForms instance which contains data
                            captured from the end-user (step 5 above).
                        </p>
                    </li>
                </ul>
                <p>
                    In this chapter we explore the first two aspects. You hook-up your backend
                    logic for a page in your application page flow. The <a
                    href="reference-page-flow">Page Flow Controller</a> documentation details how
                    this is done.
                </p>
            </section>
            -->
        </section>
        <a name="xforms-getting-started"/>
        <section>
            <title>Getting Started With the Orbeon Forms XForms Engine</title>
            <section>
                <title>The XForms Sandbox</title>
                <p>
                    The easiest way to get started with simple examples is to use the Orbeon Forms XForms Sandbox. This
                    tool allows you to upload example XForms files from your web browser and to see the results
                    directly. You can access the XForms sandbox:
                </p>
                <ul>
                    <li>
                        <p>
                            <b>Online:</b> visit <a
                            href="http://www.orbeon.com/ops/xforms-sandbox/">this link</a>
                            to access the online public XForms Sandbox.
                        </p>
                    </li>
                    <li>
                        <p>
                            <b>Locally:</b> if this documentation is produced by your local installation of Orbeon
                            Forms, visit <a href="/xforms-sandbox/">this link</a>.
                        </p>
                    </li>
                </ul>
                <p>
                    After submitting an XHTML + XForms file, the result, or errors, should display.
                    If you have changed your local XForms file, reloads that page in your browser
                    and this will upload again your local XForms file and the XForms Sandbox will
                    run the new version. To select another file to upload use your browser quotes
                    "back" button to return to the main XForms sandbox page.
                </p>
            </section>
            <!--
            <section>
                <title>Integrating XForms in Orbeon Forms</title>
                <p>
                    TODO: past the sandbox, how to integrate XForms with Orbeon Forms: single static page,
                    dynamic page, PFC and MVC, submissions, services, proxy mode, etc.
                </p>
            </section>
            -->
            <section>
                <title>Browser Support</title>
                <p>
                    [TODO: detail browser support]
                </p>
            </section>
        </section>
        <section>
            <title>Programming With XForms</title>
            <a name="xforms-model"/>
            <section>
                <title>XForms Model</title>
                <img src="../apps/doc/images/reference-xforms-type.png" class="ops-doc-image"/>
                <section>
                    <title>Introduction</title>
                    <p>
                        To help in our exploration of XForms we consider a specific example: an
                        XForms Credit Card Verifier. This example displays a simple form asking
                        for a credit card number and related information to be entered, as shown on
                        the screenshot to the right. The information entered by the end-user is
                        validated by a set of rules and errors are flagged in red.
                    </p>
                    <p>
                        First, the information contained in the form is stored in an XML document
                        called an <i>XForms instance</i>, which is the skeleton or shell that will
                        contain the data captured by the form. You define an XForms instance within
                        an <code>xforms:instance</code>. In the Credit Card Verifier the unique
                        XForms instance is declared with:
                    </p>
                    <xml-source show-namespaces="false">
                        <xforms:instance id="credit-card-instance">
                            <credit-card>
                                <type/>
                                <number/>
                                <expiration-month/>
                                <expiration-year/>
                                <verification-code/>
                                <valid/>
                            </credit-card>
                        </xforms:instance>
                    </xml-source>
                    <p>
                        The XForms instance does not have to be empty of data: it can contain
                        initial values for the form. Here we set the <code>valid</code> element to
                        the value "false" by default:
                    </p>
                    <xml-source show-namespaces="false">
                        <xforms:instance id="credit-card-instance">
                            <credit-card>
                                <type/>
                                <number/>
                                <expiration-month/>
                                <expiration-year/>
                                <verification-code/>
                                <valid>false</valid>
                            </credit-card>
                        </xforms:instance>
                    </xml-source>
                    <p>
                        XForms instances are always contained in an <i>XForms model</i>, which:
                    </p>
                    <ol>
                        <li>
                            <p>Declares one or more XForms instance.</p>
                        </li>
                        <li>
                            <p>Optionally, declares a set of rules attached to the XForms instances.</p>
                        </li>
                        <li>
                            <p>Optionally, declares submissions.</p>
                        </li>
                    </ol>
                    <p>
                        At a minimum, the XForms instance above must be encapsulated as follows:
                    </p>
                    <xml-source show-namespaces="false">
                        <xforms:model id="main-model">
                            <xforms:instance id="credit-card-instance">
                                <credit-card>
                                    <type/>
                                    <number/>
                                    <expiration-month/>
                                    <expiration-year/>
                                    <verification-code/>
                                    <valid>false</valid>
                                </credit-card>
                            </xforms:instance>
                        </xforms:model>
                    </xml-source>
                    <p>
                        Note that instances and models can have an optional <code>id</code>
                        attribute. If you have only one model and one instance, the id is optional,
                        but it becomes very convenient when more than one model or instance are
                        used.
                    </p>
                </section>
                <a name="xforms-mips"/>
                <section>
                    <title>Model Item Properties</title>
                    <p>
                        In addition to one or more XForms instances, an XForms model can declare a
                        set of "rules", called "model item properties". Let's write a set of rules
                        for the above Credit Card Validation form. Specifically we want to:
                    </p>
                    <ol>
                        <li><p>Check that the credit card number is a number and valid according to particular credit card rules </p></li>
                        <li><p>Check that the expiration month is valid (integer between 1 and 12)</p></li>
                        <li><p>Check that the expiration year is valid (4 digit number)</p></li>
                        <li><p>Display the "verification code" line only if the card type is Visa or MasterCard</p></li>
                        <li><p>Check that the verification code is valid only for Visa or MasterCard</p></li>
                    </ol>
                    <p>
                        You describe each one of those rules with an <code>&lt;xforms:bind></code>
                        element in the XForms model. Rules apply to elements and attributes in the
                        XForms instance. You specify the elements and attributes each rule applies
                        to with an XPath expression in the mandatory <code>nodeset</code> attribute.
                        In addition to the <code>nodeset</code> attribute you want to have at least
                        one attribute specifying the essence of the rule. We go over the all the
                        possible attributes later in this section, but first let's see how we can
                        express the above rules for the Credit Card Verifier form:
                    </p>
                    <ol>
                        <li>
                            <p>
                                You specify that the credit card number must be a number with:
                            </p>
                            <xml-source show-namespaces="false">
                                <xforms:bind nodeset="number" type="xs:integer"/>
                            </xml-source>
                            <p>
                                The value of the <code>type</code> attribute is a W3C XML Schema
                                simple type. You can see the list of simple types in the <a href="
                                http://www.w3.org/TR/2001/REC-xmlschema-0-20010502/#CreatDt">XML
                                Schema primer</a>. If the end-user enters an invalid credit card
                                number (i.e. not a number), an error will be displayed as shows in
                                the screenshot on the right.
                            </p>
                        </li>
                        <li>
                            <p>
                                You can also constrain the value of an element or attribute with an
                                XPath expression in the <code>constraint</code> attribute. For
                                instance you specify that the expiration month must be an integer
                                between 1 and 12 with:
                            </p>
                            <xml-source show-namespaces="false">
                                <xforms:bind nodeset="expiration-month" constraint=". castable as xs:integer and . >= 1 and 12 >= ."/>
                            </xml-source>
                            <p>
                                Note that we have decided here not to bother checking the expiration
                                month if no credit card number was entered.
                            </p>
                        </li>
                        <li>
                            <p>
                                Similarly, you check that the expiration year is a 4 digit number with:
                            </p>
                            <xml-source show-namespaces="false">
                                <xforms:bind nodeset="expiration-year" constraint=". castable as xs:integer and string-length(.) = 4"/>
                            </xml-source>
                        </li>
                        <li>
                            <p>
                                You hide the "verification code" text field for American Express
                                cards with:
                            </p>
                            <xml-source show-namespaces="false">
                                <xforms:bind nodeset="verification-code" relevant="../type = 'visa' or ../type = 'mastercard'"/>
                            </xml-source>
                            <p>
                                The attribute we use here is <code>relevant</code>. By default, everything is
                                relevant in the XForms instance. If a "relevant" rule is specified, the
                                XPath expression is evaluated for each node in the nodeset, and if the
                                expression returns false, then the node is not considered relevant. When
                                a node is not relevant, the corresponding widget is not displayed (more
                                on this later).
                            </p>
                        </li>
                        <li>
                            <p>
                                Finally, you check that the verification code is entered for Visa
                                and Mastercard:
                            </p>
                            <xml-source show-namespaces="false">
                                <xforms:bind nodeset="verification-code"
                                    constraint="/credit-card/type = ('visa', 'mastercard') and . castable as xs:positiveInteger"/>
                            </xml-source>
                            <p>
                                Because the <code>verification-code</code> element has both a
                                <code>relevant</code> and a <code>constraint</code> attribute, we
                                combine them on the same <code>xforms:bind</code>:
                            </p>
                            <xml-source show-namespaces="false">
                                <xforms:bind nodeset="verification-code" relevant="../type = 'visa' or ../type = 'mastercard'"
                                    constraint="/credit-card/type = ('visa', 'mastercard') and . castable as xs:positiveInteger"/>
                            </xml-source>
                        </li>
                    </ol>
                    <p>
                        XPath expressions in <code>xforms:bind</code> are by default relative to the
                        root element of the first XForms instance. This allows you to write the
                        first constraint above:
                    </p>
                    <ul>
                        <li>
                            <p>
                                Relatively to the root element of the first XForms instance:
                            </p>
                            <xml-source show-namespaces="false">
                                <xforms:bind nodeset="number" type="xs:integer"/>
                            </xml-source>
                        </li>
                        <li>
                            <p>
                                With an absolute path in the first XForms instance:
                            </p>
                            <xml-source show-namespaces="false">
                                <xforms:bind nodeset="/credit-card/number" type="xs:integer"/>
                            </xml-source>
                        </li>
                        <li>
                            <p>
                                Referring explicitly to the "credit-card-instance" using the
                                <code>instance()</code> function:
                            </p>
                            <xml-source show-namespaces="false">
                                <xforms:bind nodeset="instance('credit-card-instance')/number" type="xs:integer"/>
                            </xml-source>
                        </li>
                    </ul>
                    <p>
                        Now that we have seen a few examples of model item properties, let's go over all
                        the XForms model item properties. Model item properties can essentially be used
                        for 3 purposes:
                    </p>
                    <table>
                        <tr>
                            <th>Validation</th>
                            <td>
                                <p>
                                    The purpose of validation is to determine if the content of an element or attribute
                                    in the XForms instance is valid. Invalid values can have an impact on how a form is
                                    displayed (you might want to highlight errors and show some information to help the
                                    end-user to correct the issue). Also, the XForms engine makes sure that invalid data
                                    cannot be submitted. There are 3 ways to validate the content of an element or
                                    attribute:
                                </p>
                                <ul>
                                    <li>
                                        <p>
                                            <b>required</b> &#8213; You can specify in the <code>required</code>
                                            attribute an XPath expression that determines if a value is required. The
                                            XPath can be as simple as <code>true()</code>, or more complex and depend on
                                            other values entered by the end-user. By default values are not required.
                                        </p>
                                    </li>
                                    <li>
                                        <p>
                                            <b>type</b> &#8213; In the <code>type</code> attribute you can specify a
                                            W3C XML Schema simple type. The <code>type</code> attribute complements
                                            the <code>required</code> attribute, but applies separately.
                                        </p>
                                        <p>
                                            In Addition, some XML schema types have special behavior:
                                            <ul>
                                                <li>
                                                    <p>
                                                        <img src="../apps/doc/images/date-time.png"
                                                        class="ops-doc-image"/> <b><code>xs:date</code></b> &#8213; The
                                                        input field is complemented by a pop-up calendar. The user can
                                                        enter a date manually, or use the calendar to select a date in
                                                        the past or in the future. You can customize the calendar by
                                                        copying the files in orbeon-resources-public.jar under
                                                        ops/javascript/jscalendar to your resources directory. Your
                                                        modified files in the resources will have a precedence over
                                                        those found in orbeon-resources-public.jar.
                                                   </p>
                                                </li>
                                                <li>
                                                    <p>
                                                        <b><code>xs:time</code></b> &#8213; [TODO].
                                                   </p>
                                                </li>
                                                <li>
                                                    <p>
                                                        <b><code>xs:dateTime</code></b> &#8213; [TODO].
                                                   </p>
                                                </li>
                                            </ul>
                                        </p>
                                    </li>
                                    <li style="clear: both">
                                        <p>
                                            <b>constraint</b> &#8213; The <code>constraint</code> attribute supports
                                            any XPath expression that returns a boolean value. If <code>false()</code>
                                            is returned, then the value is considered invalid, otherwise it is
                                            considered valid.
                                        </p>
                                    </li>
                                </ul>
                            </td>
                        </tr>
                        <tr>
                            <th>Calculation</th>
                            <td>
                                <p>
                                    The purpose of calculations is to dynamically compute values. You do this with the
                                    <code>calculate</code> attribute:
                                </p>
                                <ul>
                                    <li>
                                        <p>
                                            <b>calculate</b> &#8213; The content of the element or attribute will be set
                                            to the result of the evaluation of the XPath expression in the
                                            <code>calculate</code> attribute. This way you can automatically compute
                                            some values in the XForms instance based on other values, typically entered
                                            by the end-user. By default, nodes that contain calculated values are
                                            read-only.
                                        </p>
                                    </li>
                                </ul>
                            </td>
                        </tr>
                        <tr>
                            <th>Visibility</th>
                            <td>
                                <p>
                                    In general XForms instance nodes are not read-only and are relevant, which means
                                    that if an XForms control is bound to that node (e.g. a text field), the control is
                                    displayed and is editable by the end-user. You can change this by providing XPath
                                    expressions in the <code>readonly</code> and <code>relevant</code> attributes:
                                </p>
                                <ul>
                                    <li>
                                        <p>
                                            <b>readonly</b> &#8213; If the XPath expression in <code>readonly</code>
                                            evaluates to true, the control will be displayed in non-editable mode.
                                            Typically, in an XHTML user interface only the current value is displayed,
                                            instead of displaying a form element, like a text field.
                                        </p>
                                    </li>
                                    <li>
                                        <p>
                                            <b>relevant</b> &#8213; If the XPath expression in <code>relevant</code>
                                            evaluates to false, the control will not be displayed at all.
                                        </p>
                                    </li>
                                </ul>
                            </td>
                        </tr>
                    </table>
                </section>
            </section>
            <a name="xforms-actions"/>
            <section>
                <title>Actions</title>
                <a name="xforms-setvalue"/>
                <section>
                    <title>Setting Instance Values with the <code>xforms:setvalue</code> Action</title>
                    <p>
                        There are two ways of providing the value to set with
                        <code>&lt;xforms:setvalue></code>. The first one specifies the value as a
                        literal enclosed in the <code>&lt;xforms:setvalue></code> element. The
                        second possibility uses the <code>value</code> attribute: the content of the
                        attribute is an XPath expression evaluated in the context of the node the
                        <code>xforms:setvalue</code> element is bound (through the <code>ref</code>
                        attribute). The content of the node pointed to by the <code>ref</code>
                        attribute will be set with the result of the XPath expression provided in
                        the <code>value</code> attribute. The example below and uses two
                        <code>&lt;xforms:setvalue></code>, each one providing the new value in a
                        different way.
                    </p>
                    <xml-source>
                        <xforms:trigger>
                            <xforms:label>Submit</xforms:label>
                            <xforms:action ev:event="DOMActivate">
                                <xforms:setvalue ref="clicked">my-button</xforms:setvalue>
                                <xforms:setvalue ref="flavor" value="concat('van', 'illa')"/>
                            </xforms:action>
                        </xforms:trigger>
                    </xml-source>
                </section>
                <a name="xforms-message"/>
                <section>
                    <title>Displaying Messages with the <code>xforms:message</code> Action</title>
                    <img src="../apps/doc/images/reference-xforms-message.png" class="ops-doc-image"/>
                    <p>
                        The XForms message action (<code>xforms:message</code>) displays a message to the user.
                        The message to render can be specified in different ways, in order of precedence:
                    </p>
                    <ul>
                        <li>Binding attributes (<code>ref</code> or <code>bind</code>)</li>
                        <li>Linking attribute (<code>src</code>)</li>
                        <li>Inline content, including optional <code>xforms:output</code> elements</li>
                    </ul>
                    <p>
                        <code>xforms:message</code> supports the following values on the <code>level</code> attribute:
                    </p>
                    <ul>
                        <li>
                            <p>
                                <code>modal</code>. This standard level specifies taht the message needs to be closed
                                by the user before any further interaction can take place with the form.
                            </p>
                        </li>
                        <li>
                            <p>
                                <code>xxforms:log-debug</code>, <code>xxforms:log-info</code>,
                                <code>xxforms:log-warn</code> and <code>xxforms:log-error</code>. These values cause the
                                message to be logged on the server using the levels "debug", "info", "warn" and "error"
                                as per the log4j terminology. Messages output with these levels appear in the
                                Orbeon Forms logs depending on the configuration of <code>log4j.xml</code>.
                            </p>
                        </li>
                    </ul>
                    <p>
                        The <code>level</code> is optional and defaults to <code>modal</code>.
                    </p>
                    <note>
                        <p>When using the linking attribute (<code>src</code>), the value must be an absolute URL,
                        starting with <code>oxf:</code>, <code>http:</code> or other supported protocols. It is not
                        recommended to use the <code>src</code> attribute to specify the content of the message.</p>
                    </note>
                    <p>
                        Simple message:
                    </p>
                    <xml-source show-namespaces="false">
                        <xforms:trigger>
                            <xforms:label>Test</xforms:label>
                            <xforms:message ev:event="DOMActivate" ref="taste"/>
                        </xforms:trigger>
                    </xml-source>
                    <p>
                        Message with nested <code>xforms:output</code>:
                    </p>
                    <xml-source show-namespaces="false">
                        <xforms:trigger>
                            <xforms:label>Test</xforms:label>
                            <xforms:message ev:event="DOMActivate" level="modal">
                                This is your first name:
                                <xforms:output value="first-name"/>
                            </xforms:message>
                        </xforms:trigger>
                    </xml-source>
                    <p>
                        Server-side log message:
                    </p>
                    <xml-source show-namespaces="false">
                        <xforms:submission>
                            ...
                            <xforms:message ev:event="xforms-submit-error" level="xxforms:log-error">
                                A submission error occurred:
                                <xforms:output value="event('error-type')"/>
                            </xforms:message>
                        </xforms:submission>
                    </xml-source>
                </section>
            </section>
        </section>
        <a name="xforms-initialization"/>
        <section>
            <title>XForms Initialization</title>
            <p>
                Upon loading, an XForms document goes through a phase of initialization during which models, instances
                and controls are created and prepared.
            </p>
            <p>
                As a form author, you can hook-up event handlers to perform your own initialization. You usually do this
                with either the <code>xforms-model-construct-done</code> or <code>xforms-ready</code> events dispatched
                to each model.
            </p>
            <p>
                In many cases, you can use either event, but there is a significant difference: when
                <code>xforms-model-construct-done</code> runs, controls are not yet initialized, and you may obtain
                better performance when using that event, as controls don't have to update as a response to  actions.
            </p>
            <p>
                Here are a few things you can do during initialization:
            </p>
            <ul>
                <li>
                    <p>
                        <b>Call submissions to load data.</b> For example, you may want to load initial form data from
                        a database, or load localization resources.
                    </p>
                    <xml-source>
                        <xforms:model>
                            <xforms:send ev:event="xforms-model-construct-done" submission="load-submission"/>
                            ...
                        </xforms:model>
                    </xml-source>
                </li>
                <li>
                    <p>
                        <b>Prepare data.</b> For example, you may want to perform initial calculations.
                    </p>
                    <xml-source>
                        <xforms:model>
                            <xforms:setvalue ev:event="xforms-model-construct-done" ref="uuid" value="digest(string(random(true)), 'MD5', 'hex')"/>
                            ...
                        </xforms:model>
                    </xml-source>
                </li>
            </ul>
        </section>
        <a name="xforms-instance-initialization"/>
        <section>
            <title>XForms Instance Initialization</title>
            <section>
                <title>Rationale</title>
                <p>
                    An XForms page usually needs to contain initial data when first loaded. The data may be inline, come
                    from a database, from a form submitted on a previous page, etc. This section looks at the different
                    ways to initialize XForms instances.
                </p>
            </section>
            <a name="xforms-instance-initialization-recommended"/>
            <section>
                <title>Recommended methods</title>
                <p>
                    See <a href="http://wiki.orbeon.com/forms/how-to/load-initial-form-data">the Orbeon Forms wiki</a>
                    for a guide to initializing instances.
                </p>
            </section>
            <a name="xforms-instance-initialization-pfc"/>
            <section>
                <title>Initializing XForms Instances from the PFC</title>
                <section>
                    <title>Page Flow Definitions</title>
                    <p>
                        The Page Flow Controller supports an MVC architecture that allows pages to be built with a
                        page model and a page view. The page model is in charge of preparing data then sent to the page
                        view for display. Assume the following definitions in your page flow, with a page model and
                        either a static page view:
                    </p>
                    <xml-source>
                        <page id="..." path-info="..." model="my-page-model.xpl" view="my-page-view.xhtml"/>
                    </xml-source>
                    <p>
                        Or a dynamic XSLT page view:
                    </p>
                    <xml-source>
                        <page id="..." path-info="..." model="my-page-model.xpl" view="my-page-view.xsl"/>
                    </xml-source>
                    <p>
                        As always with Orbeon Forms, the page model produces a page model document on its
                        <code>data</code> output, and the page view can access this document on its <code>data</code>
                        input, as shown in the following sections. The page view also has access on its
                        <code>instance</code> input to the current XML submission, which may be an unmodified submission
                        performed on the page (in case the page model doesn't have an <code>instance</code> output), or
                        a submission created or modified by the page model and produced on its <code>instance</code>
                        output. These mechanisms are described in details in the <a
                        href="reference-page-flow#page-model-page-view">PFC documentation</a>.
                    </p>
                </section>
                <a name="xforms-instance-initialization-xinclude"/>
                <section>
                    <title>Using XInclude</title>
                    <p>
                        In this scenario, the PFC page model generates an XML document which contains an XForms
                        instance on its <code>data</code> output. A static PFC page view then includes this document
                        using <code>xi:include</code>, as follows:
                    </p>
                    <xml-source show-namespaces="false" xmlns:xi="dummy">
                        <html xmlns:xforms="http://www.w3.org/2002/xforms"
                              xmlns="http://www.w3.org/1999/xhtml">
                            <head>
                                <title>Summary</title>
                                <xforms:model>
                                    <xforms:instance id="document-infos-instance">
                                        <comment xmlns=""> This is where the XML document produced by the page model is included </comment>
                                        <xi:include href="input:data"/>
                                    </xforms:instance>
                                    ...
                                </xforms:model>
                            </head>
                            <body>
                                ...
                            </body>
                        </html>
                    </xml-source>
                    <p>
                        The use of the URI <code>input:data</code> instructs XInclude processing to dynamically include the
                        <code>data</code> output of the page view, which is produced on the <code>data</code> output of the
                        page model. Note that you can also use the <code>instance</code> input, which then refers to the
                        current XML submission:
                    </p>
                    <xml-source show-namespaces="false" xmlns:xi="dummy">
                        <xforms:instance id="document-infos-instance">
                            <comment xmlns=""> This is where the XML document produced by the page model is included </comment>
                            <xi:include href="input:instance"/>
                        </xforms:instance>
                    </xml-source>
                    <note>
                        <p>
                            Whenever possible, the use of the <code>&lt;xforms:instance></code>'s <code>src</code>
                            attribute is preferable. Doing so may have a positive impact on performance as more caching
                            can take place.
                        </p>
                    </note>
                </section>
                <a name="xforms-instance-initialization-xslt"/>
                <section>
                    <title>Using XSLT</title>
                    <p>
                        You can use a dynamic XSLT page view to perform the inclusion of the instance. XSLT is more
                        flexible than XInclude, but less efficient at runtime. The following example uses the
                        <code>data</code> input of the page view to initialize an XForms instance:
                    </p>
                    <xml-source show-namespaces="false">
                        <html xmlns:xforms="http://www.w3.org/2002/xforms"
                              xmlns="http://www.w3.org/1999/xhtml"
                              xsl:version="2.0">
                            <head>
                                <title>Summary</title>
                                <xforms:model>
                                    <xforms:instance id="document-infos-instance">
                                        <comment xmlns=""> This is where the XML document produced by the page model is included </comment>
                                        <xsl:copy-of select="/*"/>
                                    </xforms:instance>
                                    ...
                                </xforms:model>
                            </head>
                            <body>
                                ...
                            </body>
                        </html>
                    </xml-source>
                    <p>
                        Note the use of <code>xsl:version="2.0"</code> on the root element of the document, which instructs
                        the PFC to process the page view as an XSLT stylesheet.
                    </p>
                    <p>
                        The following example uses instead the <code>instance</code> input of the page view to
                        initialize an XForms instance:
                    </p>
                    <xml-source show-namespaces="false">
                        <xforms:instance id="document-infos-instance">
                            <comment xmlns=""> This is where the XML document produced by the page model is included </comment>
                            <xsl:copy-of select="doc('input:instance')"/>
                        </xforms:instance>
                    </xml-source>
                    <p>
                        The use of the XPath <code>doc()</code> function with a URI <code>input:instance</code>
                        instructs XSLT processing to dynamically include the <code>instance</code> input of the page
                        view.
                    </p>
                    <note>
                        You can use XInclude instructions in a dynamic XSLT page view as well. In this case, it is
                        important to note that XInclude instructions are processed before XSLT instructions, i.e. the result
                        of XInclude instructions is an XSLT stylesheet, which is then executed.

                        <!--[TODO: Figure showing XInclude -> XSLT processing.]-->
                    </note>
                    <note>
                        <p>
                            Whenever possible, the use of the <code>&lt;xforms:instance></code>'s <code>src</code>
                            attribute is preferable. Doing so may have a positive impact on performance as more caching
                            can take place. For performance reasons, we also recommend using static XHTML views instead
                            of XSLT whenever possible.
                        </p>
                    </note>
                </section>
            </section>
        </section>
        <!--
        <section>
            <title>XSLT or XForms?</title>
            <p>
                There are some similarities between XSLT and XForms. XSLT can be used to extract
                data from an XML document, format it, and output it with <code>xsl:value-of</code>.
                XForms can do the same using <code>xforms:output</code>.
            </p>
            <p>
                TODO
            </p>
        </section>
        -->
        <!--
        <section>
            <title>Labels, Hints, Alerts, Help Messages</title>
            <p>
                TODO: explain purpose, styling, content allowed (xforms:output), and when e.g.
                labels should not be used.
            </p>
        </section>
        -->
        <!--
        <section>
            <title>Using XML Schema for Validation</title>
            <p>
                TODO: basics, additional XForms constraints, tips for repeating elements
            </p>
        </section>
        -->
        <section>
            <title>XForms and Services</title>
            <section>
                <title>Introduction</title>
                <p>
                    XForms allows an XForms page to perform submissions of XForms instances and to handle a response.
                    In most cases, both the submitted XForms instance and the response are XML documents.
                </p>
                <note>
                    It is possible to submit an XForms instance with the HTTP GET method. In that case, some
                    information contained in the XML document is lost, as the structure of the instance, attributes, and
                    namespace prefixes among others, are not passed to the submission.
                </note>
                <p>
                    The XForms submission feature practically allows forms to call XML services. Those services are
                    accessible through an XML API, which means that a request is performed by sending an XML document to
                    the service, and a response consists of an XML document as well.
                </p>
            </section>
            <!--
            <section>
                <title>Calling Services</title>
                <p>
                    TODO
                </p>
            </section>
            <section>
                <title>Handling Responses</title>
                <p>
                    TODO
                </p>
            </section>
            <section>
                <title>Implementing Services with Orbeon Forms</title>
                <p>
                    TODO
                </p>
            </section>
            <section>
                <title>Page Flow Controller (PFC) Best Practices</title>
                <p>
                    TODO
                </p>
            </section>
            -->
        </section>
        <a name="xforms11-extensions"/>
        <a name="xforms11"/>
        <section>
            <title>XForms 1.1 Support</title>
            <a name="validate-relevant-attributes"/>
            <section>
                <title><code>validate</code> and <code>relevant</code> Attributes on <code>&lt;xforms:submission></code></title>
                <p>
                    Orbeon Forms supports the XForms 1.1 <code>validate</code> and <code>relevant</code> attributes
                    on <code>&lt;xforms:submission></code>. These boolean attributes disable processing of validation
                    and relevance respectively for a given submission:
                </p>
                <xml-source>
                    <xforms:submission id="my-submission" method="post" validate="false" relevant="false"
                                       resource="http://example.org/rest/draft/"
                                       replace="none"/>
                </xml-source>
                <p>
                    For more information, please visit the <a
                    href="http://www.w3.org/TR/xforms11/#submit-submission-element">XForms 1.1 specification</a>.
                </p>
            </section>
            <a name="serialization-attribute"/>
            <section>
                <title><code>serialization</code> Attribute on <code>&lt;xforms:submission></code></title>
                <p>
                    Orbeon Forms supports the XForms 1.1 <code>serialization</code> on
                    <code>&lt;xforms:submission></code>. This is particularly useful to specify the value
                    <code>none</code> with a <code>get</code> method:
                </p>
                <xml-source>
                    <xforms:submission id="my-submission" method="get" serialization="none" resource="http://example.org/document.xml"
                                       replace="instance" instance="my-instance"/>
                </xml-source>
                <p>
                    For more information, please visit the <a
                    href="http://www.w3.org/TR/xforms11/#submit-submission-element">XForms 1.1 specification</a>.
                </p>
            </section>
            <a name="asynchronous-submissions"/>
            <section>
                <title>Preliminary Support for Asynchronous Handling of <code>&lt;xforms:submission></code></title>
                <p>
                    Orbeon Forms partially supports the XForms 1.1 <code>mode="asynchronous"</code> attribute on
                    <code>&lt;xforms:submission></code>. The limitations are:
                </p>
                <ul>
                    <li>
                        <p>
                            Asynchronous submissions in an Ajax request are delayed until after everything else in the
                            request has run (including other submissions).
                        </p>
                    </li>
                    <li>
                        <p>
                            Asynchronous submissions are "fire and forget": they only work with
                            <code>replace="none"</code> and no <code>xforms-submit-done</code> /
                            <code>xforms-submit-error</code> events are dispatched.
                        </p>
                    </li>
                    <li>
                        <p>
                            All asynchronous submissions started during a given Ajax request run serially.
                        </p>
                    </li>
                </ul>
                <xml-source>
                    <xforms:submission id="test-submission" mode="asynchronous"
                        ref="." method="put" resource="http://my.service.com/"
                        replace="none"/>
                </xml-source>
                <p>
                    For more information, please visit the <a
                    href="http://www.w3.org/TR/xforms11/#submit-submission-element">XForms 1.1 specification</a>.
                </p>
                <note>
                    <p>
                        XForms 1.1 specifies that <code>mode="asynchronous"</code> should be the default, but due to the
                        client-server nature of the Orbeon Forms XForms engine, Orbeon Forms still defaults to
                        <code>mode="synchronous"</code>.
                    </p>
                </note>
            </section>
            <a name="dispatch-delay"/>
            <section>
                <title>Preliminary Support for <code>delay</code> Attribute on <code>&lt;xforms:dispatch></code> Action</title>
                <p>
                    Orbeon Forms partially supports the XForms 1.1 <code>delay</code> attribute on
                    <code>&lt;xforms:dispatch></code>. The limitations are:
                </p>
                <ul>
                    <li>
                        <p>
                            A delay greater than zero always incurs a round-trip with the client. This may mean higher
                            latency and ressource usage than could be expected. You are advised to use delays in the
                            order of seconds at least.
                        </p>
                    </li>
                    <li>
                        <p>
                            Events are not combined as specified in XForms 1.1.
                        </p>
                    </li>
                    <li>
                        <p>
                            Custom event context information is not supported and simply ignored.
                        </p>
                    </li>
                </ul>
                <p>
                    The boolean <code>xxforms:show-progress</code> attribute allows specifying whether the
                    client must enable the loading indicator when sending back delay events from the client. The default
                    is <code>true</code> and the indicator is used.
                </p>
                <xml-source>
                    <xforms:dispatch name="my-event" targetid="my-model" delay="2000" xxforms:show-progress="false"/>
                </xml-source>
                <p>
                    The <code>xxforms:progress-message</code> attribute allows specifying a custom progress message when
                    <code>xxforms:show-progress</code> is <code>true</code>. By default, the standard progres message is
                    used.
                </p>
                <xml-source>
                    <xforms:dispatch name="my-event" targetid="my-model" delay="2000" xxforms:show-progress="true" xxforms:progress-message="Autosave..."/>
                </xml-source>
                <p>
                    For more information, please visit the <a
                    href="http://www.w3.org/TR/xforms11/#action-dispatch">XForms 1.1 specification</a>.
                </p>
            </section>
            <a name="xforms11-if-while"/>
            <section>
                <title>Conditional Execution and Iteration of XForms Actions</title>
                <p>
                    Orbeon Forms supports the XForms 1.1 <code>if</code> and <code>while</code> attributes on XForms
                    action elements. For more information, please visit the <a
                    href="http://www.w3.org/TR/xforms11/#action-conditional">XForms 1.1 specification</a>.
                </p>
            </section>
            <a name="xforms11-dispatch-targetid"/>
            <section>
                <title><code>targetid</code> attribute on <code>&lt;xforms:dispatch></code></title>
                <p>
                    As of May 2009, in order to prevent attribute clashes with other specifications, the
                    <code>targetid</code> attribute supercedes the <code>target</code> on
                    <code>&lt;xforms:dispatch></code>. <code>target</code> is still supported for backward compatibility.
                </p>
            </section>
            <a name="xforms11-submission-targetref"/>
            <section>
                <title><code>targetref</code> attribute on <code>&lt;xforms:submission></code></title>
                <p>
                    As of May 2009, in order to prevent attribute clashes with other specifications, the
                    <code>targetref</code> attribute supercedes the <code>target</code> attribute on
                    <code>&lt;xforms:submission></code>. <code>target</code> is still supported for backward compatibility.
                </p>
            </section>
            <a name="xforms11-types"/>
            <section>
                <title>XForms 1.1 Types</title>
                <p>
                    Orbeon Forms supports the following XForms types:
                </p>
                <ul>
                    <li>
                        <p>
                            <code>xforms:dayTimeDuration</code>
                        </p>
                    </li>
                    <li>
                        <p>
                            <code>xforms:yearMonthDuration</code>
                        </p>
                    </li>
                    <li>
                        <p>
                            <code>xforms:email</code>
                        </p>
                    </li>
                    <li>
                        <p>
                            <code>xforms:card-number</code>
                        </p>
                    </li>
                </ul>
                <p>
                    These types can be used on binds, e.g.:
                </p>
                <xml-source>
                    <xforms:bind nodeset="my-email" type="xforms:email" required="true()"/>
                </xml-source>
            </section>
        </section>
    </body>
</document>
