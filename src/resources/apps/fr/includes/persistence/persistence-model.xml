<!--
  Copyright (C) 2012 Orbeon, Inc.

  This program is free software; you can redistribute it and/or modify it under the terms of the
  GNU Lesser General Public License as published by the Free Software Foundation; either version
  2.1 of the License, or (at your option) any later version.

  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
  without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  See the GNU Lesser General Public License for more details.

  The full text of the license is available at http://www.gnu.org/copyleft/lesser.html
  -->
<xforms:model id="fr-persistence-model"
              xmlns:xs="http://www.w3.org/2001/XMLSchema"
              xmlns:xforms="http://www.w3.org/2002/xforms"
              xmlns:ev="http://www.w3.org/2001/xml-events"
              xmlns:exforms="http://www.exforms.org/exf/1-0"
              xmlns:xxforms="http://orbeon.org/oxf/xml/xforms"
              xmlns:xi="http://www.w3.org/2001/XInclude"
              xmlns:xxi="http://orbeon.org/oxf/xml/xinclude"
              xmlns:f="http://orbeon.org/oxf/xml/formatting"
              xmlns:xhtml="http://www.w3.org/1999/xhtml"
              xmlns:saxon="http://saxon.sf.net/"
              xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
              xmlns:fr="http://orbeon.org/oxf/xml/form-runner"
              xmlns:formRunner="java:org.orbeon.oxf.fr.FormRunner"
              xmlns:xpl="java:org.orbeon.oxf.pipeline.api.FunctionLibrary">

    <xxforms:variable name="parameters" value="xxforms:instance('fr-parameters-instance')" as="element()"/>
    <xxforms:variable name="app" value="$parameters/app" as="xs:string"/>
    <xxforms:variable name="form" value="$parameters/form" as="xs:string"/>
    <xxforms:variable name="document" select="$parameters/document"/>
    <xxforms:variable name="mode" select="$parameters/mode"/>

    <!-- Model initialization when we have a specific app and form -->
    <!-- TODO: Should not do this on summary page, for example -->
    <xforms:action ev:event="xforms-model-construct-done" if="$app != '*' and $form != '*'">

        <!-- Initialize parameters to pass to "new" service -->
        <xxforms:variable name="pass-request-parameters" select="xxforms:property(string-join(('oxf.fr.detail.new.service.passing-request-parameters', $app, $form), '.'))"/>
        <xforms:action iterate="tokenize($pass-request-parameters, '\s+')">
            <xxforms:variable name="parameter-name" select="."/>
            <xxforms:variable name="parameter-value" select="xxforms:get-request-parameter($parameter-name)"/>
            <xforms:insert context="instance('fr-service-parameters')" origin="xxforms:element($parameter-name, $parameter-value)"/>
        </xforms:action>

        <!-- Load current form configuration -->
        <xxforms:variable name="source-form" select="if (exists(xxforms:get-request-attribute('fr-form-definition')))
                                                        then xxforms:get-request-attribute('fr-form-definition')
                                                        else xxforms:get-request-attribute('oxf.xforms.renderer.document')"/>
        <xforms:action if="exists($source-form)">
            <!-- Got it from the request -->
            <xforms:message level="xxforms:log-debug">Got source form from request.</xforms:message>
            <xforms:insert nodeset="instance('fr-source-form-instance')" origin="$source-form"/>
        </xforms:action>
        <xforms:action if="not(exists($source-form))">
            <!-- Try submission -->
            <xforms:message level="xxforms:log-debug">Could not get source form from request. Trying submission instead.</xforms:message>
            <xforms:send submission="get-source-form-submission"/>
        </xforms:action>

        <!--  Send a "Not Found" error if the form definition is not found -->
        <xforms:action if="empty(instance('fr-source-form-instance')/xhtml:head/xforms:model)" type="xpath">formRunner:sendError(404)</xforms:action>

        <!-- Compute authorized operations -->
        <xxforms:variable name="metadata" select="instance('fr-source-form-instance')/xhtml:head/xforms:model/xforms:instance[@id = 'fr-form-metadata']/metadata treat as element()"/>
        <xforms:setvalue ref="instance('fr-authorized-operations')" value="string-join(formRunner:authorizedOperationsOnForm($metadata), ' ')"/>
        <!-- If user can't perform the required operations, deny access to this page -->
        <xxforms:variable name="mode" select="xxforms:instance('fr-parameters-instance')/mode treat as element()"/>
        <xxforms:variable name="operations" select="tokenize(instance('fr-authorized-operations'), '\s')"/>
        <xxforms:variable name="unauthorized-access" select="
            ($mode = 'summary' and not($operations = ('*', 'read', 'update', 'delete'))) or
            ($mode = ('new', 'import') and not($operations = ('*', 'create'))) or
            ($mode = 'edit' and not($operations = ('*', 'update'))) or
            ($mode = ('view', 'pdf') and not($operations = ('*', 'read')))"/>
        <!-- Send an "Unauthorized" error if the user is unauthorized -->
        <xforms:action if="$unauthorized-access" type="xpath">formRunner:sendError(401)</xforms:action>

        <xforms:action if="$mode != 'summary'">

            <xxforms:variable name="is-new-id" select="normalize-space($document) = ''"/>
            <xxforms:variable name="is-xml-submit" select="exists(xxforms:get-request-attribute('fr-form-data'))"/>
            <xxforms:variable name="is-submit" select="$is-xml-submit or exists(xxforms:get-request-parameter('fr-form-data'))"/>

            <!-- Create random document id if none is provided. This is the default for 'new', but a missing id is also
                 allowed for 'edit', 'view', etc., when data is posted to the page. -->
            <xforms:setvalue if="$is-new-id" ref="$document" value="digest(string(random(true)), 'MD5', 'hex')"/>

            <!-- Case of 'new' mode where we load the initial data via a service -->
            <xxforms:variable name="new-from-service" select="$mode = 'new' and xxforms:property(string-join(('oxf.fr.detail.new.service.enable', $app, $form), '.'))"/>
            <xforms:action if="$new-from-service">
                <xforms:message level="xxforms:log-debug">Loading new document from service</xforms:message>
                <xforms:send submission="fr-get-instance-from-service"/>
            </xforms:action>

            <!-- Check the data submitted to the page.

                 - 'new' mode:  check if we accept submitted data based on a property
                 - 'edit' mode: check based on a property, but let plain XML POSTs pass as that's used internally to switch modes
                 - other modes: accept XML POSTs

                 In the future, we should enforce other cases by making sure that the data comes from Form Runner itself. -->
            <xxforms:variable name="pass-submit-check"
                              select="$mode = 'new' and xxforms:property(string-join(('oxf.fr.detail.new.accept-post', $app, $form), '.'))
                                   or $mode = 'edit' and ($is-xml-submit or xxforms:property(string-join(('oxf.fr.detail.edit.accept-post', $app, $form), '.')))
                                   or not($mode = ('new', 'edit')) and $is-xml-submit"/>

            <!-- Case of data submitted to the page -->
            <xforms:action if="$is-submit and $pass-submit-check">

                <!-- Do we have data posted to this form as a parameter? -->
                <xforms:action if="not($is-xml-submit)">
                    <xxforms:variable name="form-data" select="xxforms:get-request-parameter('fr-form-data')"/>
                    <xforms:action if="$form-data">
                        <xforms:message level="xxforms:log-debug">Loading document submitted to the page as parameter</xforms:message>
                        <xxforms:variable name="xml-data" select="saxon:parse(saxon:base64Binary-to-string(xs:base64Binary($form-data), 'UTF-8'))"/>
                        <xforms:insert nodeset="xxforms:instance('fr-form-instance')" origin="$xml-data"/>
                    </xforms:action>
                </xforms:action>

                <!-- Do we have data posted to this form as XML? -->
                <xforms:action if="$is-xml-submit">
                    <xforms:message level="xxforms:log-debug">Loading document submitted to the page as XML</xforms:message>
                    <xxforms:variable name="form-data" select="xxforms:get-request-attribute('fr-form-data')" as="document-node()?"/>
                    <xforms:insert nodeset="xxforms:instance('fr-form-instance')" origin="$form-data"/>
                </xforms:action>

                <!-- Set initial data as dirty, because this is the case typically of switching between script/noscript
                     mode, and we can't really know if the data is clean or dirty but would like to enable the save button -->
                <xforms:setvalue if="$mode = 'edit'" ref="instance('fr-persistence-instance')/initial-data-status">dirty</xforms:setvalue>
            </xforms:action>

            <!-- In 'new' mode only, after an external document has been set, recalculate defaults (and rebuild so the refs
                 in the binds are updated). -->
            <xforms:action if="$new-from-service or ($mode = 'new' and $is-submit)">
                <!-- After we get the document from the persistence layer, recalculate defaults (and rebuild so the refs in the binds are updated) -->
                <xforms:message level="xxforms:log-debug">Updating initial values for externally-loaded new document</xforms:message>
                <xforms:rebuild model="fr-form-model"/>
                <xforms:recalculate xxforms:defaults="true" model="fr-form-model"/>
            </xforms:action>

            <!-- Case of modes other than new where the data to be edited or viewed is loaded from the persistence layer -->
            <xforms:action if="$mode != 'new' and not($is-new-id) and not($is-submit)">
                <!-- Load document with the provided id from persistence layer -->
                <xforms:message level="xxforms:log-debug">Loading document by id from persistence layer: <xforms:output value="$document"/></xforms:message>
                <xforms:send submission="fr-get-document-submission"/>
            </xforms:action>

            <!-- Otherwise, don't stay here if the constraints are not satisfied -->
            <xforms:load if="($is-submit and not($pass-submit-check)) or (not($mode = ('new', 'test')) and $is-new-id and not($is-submit))" resource="/fr/unauthorized"/>
        </xforms:action>

        <!-- Notify that the data is ready -->
        <xforms:dispatch targetid="fr-form-model" name="fr-data-ready"/>

    </xforms:action>

    <xforms:action ev:event="xforms-ready">
        <!-- In case there is an error, show it (error occurred when the controls are not yet ready) -->
        <xforms:toggle if="instance('fr-persistence-instance')/is-error = 'true'" case="fr-message-fatal-error"/>

        <!-- Set focus on first focusable control -->
        <!--<xforms:setfocus control="fr-form-group"/>-->

        <!-- Force all this so we can safely set the data status -->
        <xforms:rebuild/>
        <xforms:recalculate/>
        <xforms:revalidate/>
        <xforms:refresh/>
        <!-- Set the initial data status -->
        <xforms:setvalue ref="instance('fr-persistence-instance')/data-status" value="../initial-data-status"/>
    </xforms:action>

    <!-- Clear operation -->
    <xforms:action ev:event="fr-clear">
        <!-- Copy original instance -->
        <xxforms:variable name="instance-element" as="element(xforms:instance)"
                          select="instance('fr-source-form-instance')/xhtml:head/xforms:model[@id = 'fr-form-model']/xforms:instance[@id = 'fr-form-instance']"/>
        <!-- Case of inline template -->
        <xforms:insert if="not($instance-element/@src)" nodeset="xxforms:instance('fr-form-instance')" origin="$instance-element/*"/>
        <!-- Case of @src template -->
        <xforms:insert if="$instance-element/@src" nodeset="xxforms:instance('fr-form-instance')" origin="doc($instance-element/@src)"/>

        <!-- Notify that the data is reset -->
        <xforms:dispatch targetid="fr-form-model" name="fr-data-reset"/>

        <!-- Perform refresh (above sets RRR flags already) so that after that we can clear error summary -->
        <xforms:refresh/>

        <!-- Clear error summary -->
        <xforms:dispatch name="fr-unvisit-all" targetid="fr-error-summary-model"/>
    </xforms:action>

    <!-- New document operation -->
    <xforms:setvalue ev:event="fr-new-document" ref="$document" value="digest(string(random(true())), 'MD5', 'hex')"/>

    <!-- Delete operation -->
    <xforms:action ev:event="fr-delete-data">
        <xforms:send submission="fr-delete-document-submission">
            <xxforms:context name="document-id" select="event('document-id')"/>
        </xforms:send>
    </xforms:action>

    <xforms:submission id="fr-delete-document-submission"
            method="delete" serialization="none"
            resource="/fr/service/persistence/crud/{$app}/{$form}/data/{event('document-id')}/data.xml"
            replace="none"/>

    <!-- Respond to save button activation -->
    <xforms:action ev:event="DOMActivate" ev:observer="fr-save-button">
        <xforms:setvalue ref="instance('fr-persistence-instance')/submit-or-save-or-send">save</xforms:setvalue>
        <xforms:dispatch name="fr-save-action" target="fr-persistence-model">
            <xxforms:context name="fr:check-data-valid" select="true()"/>
        </xforms:dispatch>
    </xforms:action>

    <!-- Respond to submit button activation -->
    <xforms:action ev:event="DOMActivate" ev:observer="fr-submit-button">
        <xforms:setvalue ref="instance('fr-persistence-instance')/submit-or-save-or-send">submit</xforms:setvalue>
        <xforms:dispatch name="fr-save-action" target="fr-persistence-model">
            <xxforms:context name="fr:check-data-valid" select="true()"/>
        </xforms:dispatch>
    </xforms:action>

    <!-- Respond to workflow preview button activation -->
    <xforms:action ev:event="DOMActivate" ev:observer="fr-workflow-review-button">

        <!-- TODO: Fix duplication of this code and code in fr-save-action -->
        <xxforms:variable name="validity-passed" select="xxforms:instance('fr-error-summary-instance')/valid = 'true'"/>
        <xforms:action if="not($validity-passed)">
            <!-- Data not valid: display error -->
            <xforms:setvalue ref="xxforms:instance('fr-persistence-instance')/message"
                             model="fr-resources-model" value="$fr-fr-resources/detail/messages/form-validation-error"/>
            <xforms:toggle case="fr-message-validation-error"/>
            <!-- Mark all active alerts as visited -->
            <xforms:dispatch name="fr-visit-alerts" target="fr-persistence-model"/>
            <!-- Open all sections -->
            <xforms:dispatch name="fr-expand-all" target="fr-sections-model"/>
        </xforms:action>

        <!-- Display message if there is at least one upload in progress -->
        <xforms:message if="$validity-passed and xxforms:pending-uploads() > 0" model="fr-resources-model" value="$fr-fr-resources/detail/messages/upload-in-progress"/>

        <!-- Send -->
        <xforms:send if="$validity-passed and not(xxforms:pending-uploads() > 0)" submission="fr-workflow-review-submission"/>

    </xforms:action>

    <!-- Respond to workflow edit button activation -->
    <xforms:action ev:event="DOMActivate" ev:observer="fr-workflow-edit-button">
        <!-- Just send the submission -->
        <xforms:send submission="fr-workflow-edit-submission"/>
    </xforms:action>

    <!-- Respond to send button activation -->
    <xforms:action ev:event="DOMActivate" ev:observer="fr-workflow-send-button">
        <xforms:setvalue ref="instance('fr-persistence-instance')/submit-or-save-or-send">send</xforms:setvalue>
        <xforms:dispatch name="fr-save-action" target="fr-persistence-model">
            <xxforms:context name="fr:check-data-valid" select="true()"/>
        </xforms:dispatch>
    </xforms:action>

    <xforms:action ev:event="fr-save-action">
        <!-- fr:check-data-valid   xs:boolean   * true if the data needs to be valid to perform this action (generally the
                                                  case this is called in response to users' actions such as click on a
                                                  Save button).
                                                * false if this action should be performed even if the data is invalid
                                                  (e.g. when doing an auto-save). -->
        <xxforms:variable name="check-data-valid" select="event('fr:check-data-valid')"/>

        <xforms:setvalue ref="instance('fr-persistence-instance')/save-attempted">true</xforms:setvalue>
        <xforms:action if="$document != ''">

            <!-- Check validity of data before trying to save, because:
                 1) We don't want to save attachments if the form is invalid.
                 2) Submission doesn't check validity anymore. -->
            <!-- We use instance('fr-error-summary-instance')/valid and not xxforms:valid() because the instance
                 validity may not be reflected with the use of XBL components. -->

            <xxforms:variable name="validity-passed" select="not($check-data-valid) or (xxforms:instance('fr-error-summary-instance')/valid = 'true')" as="xs:boolean"/>

            <xforms:action if="not($validity-passed)">
                <!-- Data not valid: display error -->
                <xforms:setvalue ref="xxforms:instance('fr-persistence-instance')/message"
                                 model="fr-resources-model" value="$fr-fr-resources/detail/messages/form-validation-error"/>
                <xforms:toggle case="fr-message-validation-error"/>
                <!-- Mark all active alerts as visited -->
                <xforms:dispatch name="fr-visit-alerts" target="fr-persistence-model"/>
                <!-- Open all sections -->
                <xforms:dispatch name="fr-expand-all" target="fr-sections-model"/>
            </xforms:action>

            <!-- Display message if there is at least one upload in progress -->
            <xforms:message if="$validity-passed and xxforms:pending-uploads() > 0" model="fr-resources-model" value="$fr-fr-resources/detail/messages/upload-in-progress"/>

            <!-- Actually save if we passed validation and there is no upload in progress -->
            <xforms:action if="$validity-passed and not(xxforms:pending-uploads() > 0)">
                <!-- Data valid: proceed with saving attachments and data -->

                <!-- Notify that the data is about to be saved -->
                <xforms:dispatch targetid="fr-form-model" name="fr-data-save-prepare"/>

                <!-- Find all instance nodes containing upload file URLs -->
                <xforms:var name="upload-nodes" model="fr-form-model" value="instance('fr-form-instance')/root()//(*[not(*)] | @*)[formRunner:isUploadedFileURL(string(.))]"/>
                
                <!--<xforms:message level="xxforms:log-debug">-->
                    <!--xxx <xforms:output value="count($upload-nodes)"/>-->
                <!--</xforms:message>-->
                
                <xforms:action iterate="$upload-nodes">
                    
                    <xforms:var name="holder" value="."/>
                    <xforms:var name="uri" value="normalize-space(substring-before($holder, '?'))"/>

                    <!-- Compute the persistence resource name -->
                    <xforms:var name="upload-extension" value="normalize-space(tokenize($holder/@filename, '\.')[last()])"/>
                    <xforms:var name="upload-has-extension" value="count(tokenize($holder/@filename, '\.')) gt 1 and $upload-extension != ''"/>
                    <xforms:var name="new-id" value="digest(string(random(true())), 'MD5', 'hex')" />
                    <xforms:var name="new-filename" value="string-join(($new-id, if (not($upload-has-extension)) then 'bin' else $upload-extension), '.')"/>
                    <xforms:var name="resource" as="xs:string"
                                      value="concat('/fr/service/persistence/crud/',
                                                $app, '/', $form, '/data/',
                                                $document, '/', $new-filename)"/>

                    <!--<xforms:message level="xxforms:log-debug">-->
                        <!--xxx-->
                        <!--<xforms:output value="$upload-extension"/> -->
                        <!--<xforms:output value="$upload-has-extension"/> -->
                        <!--<xforms:output value="$new-id"/> -->
                        <!--<xforms:output value="$new-filename"/> -->
                        <!--<xforms:output value="$resource"/>-->
                    <!--</xforms:message>-->

                    <!-- Save attachment -->
                    <xforms:send submission="fr-create-update-attachment-submission">
                        <xxforms:context name="holder" value="$holder"/>
                        <xxforms:context name="resource" value="$resource"/>
                    </xforms:send>

                    <!-- Update the path -->
                    <xforms:setvalue if="instance('fr-persistence-instance')/is-error = 'false'" ref="$holder" value="$resource"/>
                    
                </xforms:action>

                <xforms:action if="instance('fr-persistence-instance')/is-error = 'false'">

                    <!-- Handle XML document -->
                    <xforms:send submission="fr-create-update-submission" >
                        <xxforms:context name="holder" select="xxforms:instance('fr-form-instance')"/>
                        <!-- We always store form data as "data.xml" -->
                        <xxforms:context name="resource" select="'data.xml'"/>
                    </xforms:send>

                    <!-- If we were in new mode, now we must be in edit mode -->
                    <xforms:setvalue ref="$parameters/mode" value="'edit'"/>
                </xforms:action>

                <!-- Notify that the data is saved -->
                <xforms:dispatch if="instance('fr-persistence-instance')/is-error = 'false'" targetid="fr-form-model" name="fr-data-save-done"/>
            </xforms:action>
        </xforms:action>
    </xforms:action>

    <!-- Instance to store the result of the create/update submission -->
    <xforms:instance id="fr-create-update-submission-response">
        <response xmlns=""/>
    </xforms:instance>

    <!-- Submission to create/update the XML form -->
    <!-- Note about validate="false": In general, when the user saves data, the data needs to be valid. This will be
         enforced by the "Save" button being disabled. But there are other cases where we want to call this persistence
         code and where the data might not be valid. For instance: auto-save, or saving as Draft as soon as a new
         form instance is created. -->
    <xforms:submission id="fr-create-update-submission"
            validate="false" relevant="false" method="put"
            ref="event('holder')"
            resource="/fr/service/persistence/crud/{$app}/{$form}/data/{$document}/{event('resource')}"
            replace="text" target="instance('fr-create-update-submission-response')"/>

    <!-- Submission to create/update an attachment -->
    <xforms:submission id="fr-create-update-attachment-submission"
            method="put" serialization="application/octet-stream"
            ref="event('holder')"
            resource="{event('resource')}"
            replace="none"/>

    <!-- Get document -->
    <xforms:submission id="fr-get-document-submission"
            method="get" serialization="none"
            resource="/fr/service/persistence/crud/{$app}/{$form}/data/{$document}/data.xml"
            replace="instance" xxforms:instance="fr-form-instance"/>

    <!-- Source form with metadata -->
    <xforms:instance id="fr-source-form-instance" xxforms:readonly="false"><!-- Set to false so that xforms:insert works -->
        <form xmlns=""/>
    </xforms:instance>

    <!-- NOTE: use xxforms:cache="false" otherwise updates to the form won't work in the summary page -->
    <!-- A solution for this might be for read-form.xpl, which is able to use conditional GET, to run always, or to
         improve submissions to handle conditional GET as well when using caching. -->
    <xforms:submission id="get-source-form-submission"
            method="get" serialization="none"
            resource="/fr/service/persistence/crud/{$app}/{$form}/form/form.xhtml"
            replace="instance" instance="fr-source-form-instance" xxforms:readonly="true" xxforms:cache="false" xxforms:xinclude="true"/>

    <!-- Which operations the user can perform -->
    <xforms:instance id="fr-authorized-operations">
        <operations/>
    </xforms:instance>

    <xforms:instance id="fr-service-parameters">
        <parameters/>
    </xforms:instance>

    <!-- Calls a service to get the initial instance -->
    <xforms:submission id="fr-get-instance-from-service"
            method="get" separator="&amp;" ref="instance('fr-service-parameters')"
            resource="xxforms:property(string-join(('oxf.fr.detail.new.service.uri', $app, $form), '.'))"
            replace="instance" xxforms:instance="fr-form-instance"/>

    <xforms:instance id="fr-persistence-instance">
        <save xmlns="">
            <!-- Initial data status -->
            <initial-data-status>clean</initial-data-status>
            <!-- Whether form data is clean or dirty (i.e. saved or not saved) -->
            <data-status>clean</data-status>
            <!-- Whether an attempt to submit was ever done -->
            <save-attempted>false</save-attempted>
            <!-- Success or error message to display -->
            <message/>
            <!-- Error document returned -->
            <error/>
            <!-- Whether an error was received -->
            <is-error>false</is-error>
            <!-- Whether the last action that triggered the fr-create-update-submission is a "submit" or a "save" -->
            <submit-or-save-or-send/>
            <!-- Flag to override data-safe -->
            <data-safe-override/>
            <!-- Whether data is safe -->
            <data-safe/>
            <!-- Is the captcha valid: start with false, will set it to true when valid -->
            <captcha>false</captcha>
        </save>
    </xforms:instance>

    <xforms:bind nodeset="instance('fr-persistence-instance')">
        <xforms:bind nodeset="data-safe" calculate="../data-status = 'clean' or ../data-safe-override = 'true'"/>
        <xforms:bind nodeset="captcha" constraint=". = 'true'"/>
    </xforms:bind>

    <!-- Configuration for Saxon serialization -->
    <xforms:instance id="fr-xsl-output-instance">
        <xsl:output xmlns:xsl="http://www.w3.org/1999/XSL/Transform" method="xml" omit-xml-declaration="yes" indent="yes" saxon:indent-spaces="4"/>
    </xforms:instance>

    <xforms:instance id="fr-triggers-instance">
        <triggers xmlns="">
            <!-- Regular save/submit -->
            <save/>
            <submit/>
            <!-- These versions are disabled when possible -->
            <strict-save/>
            <strict-submit/>
            <!-- Form Builder stuff, should not be here! -->
            <publish/>
            <!-- Workflow buttons -->
            <workflow-review/>
            <workflow-edit/>
            <workflow-send/>
            <!-- Discard button -->
            <discard/>
            <!-- Other buttons (bind here to make sure they are not read-only) -->
            <other/>
        </triggers>
    </xforms:instance>

    <xforms:bind nodeset="instance('fr-triggers-instance')">
        <!--
            NOTE: Don't disable basic save/submit buttons so that user can always press it. This arguably yields a
            better experience in non-incremental mode and also allows user to force showing errors.
        -->

        <!-- Condition for disabling strict Save button -->
        <xforms:bind nodeset="strict-save" readonly="not(property('xxforms:noscript'))
            and (instance('fr-persistence-instance')/data-status = 'clean' or xxforms:instance('fr-error-summary-instance')/valid = 'false' or xxforms:pending-uploads() > 0)"/>
        <!-- Condition for disabling strict Submit button -->
        <xforms:bind nodeset="strict-submit" readonly="not(property('xxforms:noscript'))
            and (xxforms:instance('fr-error-summary-instance')/valid = 'false' or xxforms:pending-uploads() > 0)"/>

        <!-- Condition for disabling Publish button -->
        <xforms:bind nodeset="publish" readonly="not(instance('fr-persistence-instance')/data-status = 'clean') or xxforms:instance('fr-error-summary-instance')/valid = 'false' or xxforms:pending-uploads() > 0"/>

        <!-- Conditions for disabling workflow buttons -->
        <xforms:bind nodeset="workflow-review" readonly="exforms:readonly(../submit)"/>
        <xforms:bind nodeset="workflow-edit" readonly="exforms:readonly(../submit)"/>
        <xforms:bind nodeset="workflow-send" readonly="exforms:readonly(../submit)"/>
    </xforms:bind>

    <!-- HACK: dependencies: recalculate this model when there is a change in the instance holding error/validity
         information, so that the above binds are kept in sync. Ideally would need smart dependency system. -->
    <xforms:recalculate ev:event="xxforms-value-changed" ev:observer="fr-error-summary-instance"/>

    <!-- React to successful submission when saving/updating -->
    <xforms:action ev:event="xforms-submit-done" ev:target="fr-create-update-submission">
        <xforms:setvalue ref="xxforms:instance('fr-persistence-instance')/message"
                         model="fr-resources-model" value="$fr-fr-resources/detail/messages/save-success"/>

        <!-- Show success message -->
        <xforms:toggle case="fr-message-success"/>

        <!-- HACK: Force this before cleaning the status because we do a setvalue just before calling the submission -->
        <xforms:recalculate/>
        <xforms:refresh/>

        <xforms:setvalue ref="instance('fr-persistence-instance')/data-status">clean</xforms:setvalue>

        <!-- If the document was saved because of a "submit", handle the rest of the submission process in dialog -->
        <xforms:action if="instance('fr-persistence-instance')/submit-or-save-or-send = 'submit'">
            <!-- Show the submission result dialog -->
            <xxforms:show dialog="fr-submission-result-dialog">
                <xxforms:context name="fr:content" select="instance('fr-create-update-submission-response')"/>
            </xxforms:show>
        </xforms:action>

        <!-- If the document was saved because of a "send", handle the rest of the submission process -->
        <xforms:action if="instance('fr-persistence-instance')/submit-or-save-or-send = 'send'">
            <!-- TODO: move this to separate model (fr-send-model or fr-workflow-model) -->

            <xxforms:variable name="is-send-navigate" select="$workflow-success-uri != ''" as="xs:boolean"/>
            <xxforms:variable name="is-send-email" select="xxforms:property(string-join(('oxf.fr.detail.send.email', $app, $form), '.'))" as="xs:boolean"/>
            <xxforms:variable name="is-send-alfresco" select="xxforms:property(string-join(('oxf.fr.detail.send.alfresco', $app, $form), '.'))" as="xs:boolean"/>

            <xforms:message level="xxforms:log-debug">Sending form data. Navigate: <xforms:output value="$is-send-navigate"/>. Email: <xforms:output value="$is-send-email"/>. Alfresco: <xforms:output value="$is-send-alfresco"/>.</xforms:message>

            <!-- Create PDF if requested -->
            <xxforms:variable name="is-create-pdf"
                              select="($is-send-navigate and xxforms:property(string-join(('oxf.fr.detail.send.pdf', $app, $form), '.')))
                                      or ($is-send-email and xxforms:property(string-join(('oxf.fr.email.attach-pdf', $app, $form), '.')))
                                      or ($is-send-alfresco and xxforms:property(string-join(('oxf.fr.alfresco.send-pdf', $app, $form), '.')))" as="xs:boolean"/>

            <xforms:message level="xxforms:log-debug">Creating PDF.</xforms:message>
            <xforms:send if="$is-create-pdf" submission="fr-pdf-service-submission"/>

            <xforms:action if="instance('fr-persistence-instance')/is-error = 'false'">
                <!-- Send to Alfresco if requested -->
                <xforms:action if="$is-send-alfresco">

                    <!-- Form definition -->
                    <xxforms:variable name="html" select="instance('fr-source-form-instance')" as="element(xhtml:html)"/>

                    <!-- Pass metadata with current language, or first language if current language is not found -->
                    <xxforms:variable name="form-titles" select="$html/xhtml:head//xforms:instance[@id = 'fr-form-metadata']/*/title" as="xs:string"/>
                    <xxforms:variable name="form-descriptions" select="$html/xhtml:head//xforms:instance[@id = 'fr-form-metadata']/*/description" as="xs:string"/>
                    <xxforms:variable name="form-title" select="($form-titles[@xml:lang = xxforms:instance('fr-language-instance')], $form-titles[1])[1]" as="xs:string"/>
                    <xxforms:variable name="form-description" select="($form-descriptions[@xml:lang = xxforms:instance('fr-language-instance')], $form-descriptions[1])[1]" as="xs:string"/>

                    <!-- Send PDF data if requested -->
                    <xforms:action if="xxforms:property(string-join(('oxf.fr.alfresco.send-pdf', $app, $form), '.'))">

                        <xforms:message level="xxforms:log-debug">Sending PDF to Alfresco...</xforms:message>

                        <!-- Get URI of PDF data -->
                        <xxforms:variable name="pdf-uri" select="xpl:rewriteServiceURI(instance('fr-workflow-send-instance'), true())" as="xs:anyURI"/>

                        <!-- Send everything to Alfresco -->
                        <xforms:dispatch target="fr-alfresco-model" name="alfresco-send-document">
                            <xxforms:context name="fr:name" select="concat($form-title, ' (#', $document, ').pdf')"/>
                            <xxforms:context name="fr:title" select="$form-title"/>
                            <xxforms:context name="fr:description" select="$form-description"/>
                            <xxforms:context name="fr:mimetype" select="'application/pdf'"/>
                            <!-- Content as Base64 -->
                            <xxforms:context name="fr:content" select="xxforms:doc-base64($pdf-uri)"/>
                        </xforms:dispatch>
                    </xforms:action>
                    <!-- Send XML data if requested -->
                    <xforms:action if="xxforms:property(string-join(('oxf.fr.alfresco.send-xml', $app, $form), '.'))">

                        <xforms:message level="xxforms:log-debug">Sending XML to Alfresco...</xforms:message>

                        <!-- Send data to Alfresco -->
                        <xforms:dispatch target="fr-alfresco-model" name="alfresco-send-document">
                            <xxforms:context name="fr:name" select="concat($form-title, ' (#', $document, ').xml')"/>
                            <xxforms:context name="fr:title" select="$form-title"/>
                            <xxforms:context name="fr:description" select="$form-description"/>
                            <xxforms:context name="fr:mimetype" select="'application/xml'"/>
                            <!-- XML data -> string -> Base64 -->
                            <xxforms:context name="fr:content" select="saxon:string-to-base64Binary(saxon:serialize(xxforms:instance('fr-form-instance'), 'xml'), 'UTF-8')"/>
                        </xforms:dispatch>
                    </xforms:action>
                </xforms:action>
            </xforms:action>

            <!-- Send email if requested -->
            <xforms:action if="instance('fr-persistence-instance')/is-error = 'false' and $is-send-email">
                <xforms:message level="xxforms:log-debug">Sending email...</xforms:message>
                <xforms:send submission="fr-email-service-submission"/>
            </xforms:action>

            <!-- Navigate to the confirmation page if requested -->
            <xforms:action if="instance('fr-persistence-instance')/is-error = 'false' and $is-send-navigate">
                <xforms:message level="xxforms:log-debug">Navigating to success page...</xforms:message>
                <xforms:send submission="fr-workflow-send-submission"/>
            </xforms:action>
        </xforms:action>

    </xforms:action>

    <!-- Send to success page -->
    <xxforms:variable name="workflow-success-uri" as="xs:anyURI"
        select="normalize-space((xxforms:property(string-join(('oxf.fr.detail.send.uri', $app, $form), '.')),
                                 xxforms:property(string-join(('oxf.fr.detail.send.success.uri', $app, $form), '.')))[normalize-space()][1])"/>
    <xxforms:variable name="workflow-success-method" as="xs:string"
        select="lower-case(xxforms:property(string-join(('oxf.fr.detail.send.success.method', $app, $form), '.')))"/>

    <!-- NOTE: keep non-relevant fields for now, as this is what's done for save/update. Should probably be configurable by the form author. -->
    <!-- TODO: possibly: pass app/form name, e.g.: resource="{$workflow-success-uri}?fr-app={$app}&amp;fr-form={$form}" -->
    <xforms:submission id="fr-workflow-send-submission"
        resource="{concat($workflow-success-uri, if (contains($workflow-success-uri, '?')) then '&amp;' else '?', 'document=', $document)}"
        relevant="{xxforms:property(string-join(('oxf.fr.detail.send.success.prune', $app, $form), '.'))}"
        validate="false" method="{$workflow-success-method}"
        serialization="{if ($workflow-success-method = 'get') then 'none' else 'application/xml'}"
        ref="if (instance('fr-workflow-send-instance') != '') then instance('fr-workflow-send-instance') else xxforms:instance('fr-form-instance')"
        replace="all"/>

    <!-- Send to error page -->
    <xxforms:variable name="workflow-error-uri" as="xs:anyURI"
        select="normalize-space(xxforms:property(string-join(('oxf.fr.detail.send.error.uri', $app, $form), '.')))"/>
    <xxforms:variable name="workflow-error-method" as="xs:string"
        select="lower-case(xxforms:property(string-join(('oxf.fr.detail.send.error.method', $app, $form), '.')))"/>

    <xforms:submission id="fr-workflow-error-submission"
        resource="{$workflow-error-uri}"
        relevant="false" validate="false" method="{$workflow-error-method}"
        serialization="{if ($workflow-error-method = 'get') then 'none' else 'application/xml'}"
        ref="if (instance('fr-workflow-send-instance') != '') then instance('fr-workflow-send-instance') else xxforms:instance('fr-form-instance')"
        replace="all"/>

    <!-- Call email service -->
    <xforms:submission id="fr-email-service-submission"
        resource="/fr/service/{$app}/{$form}/email/{$document}?fr-language={xxforms:instance('fr-language-instance')}{if (property('xxforms:noscript')) then '&amp;fr-noscript=true' else ''}"
        relevant="false" validate="false" method="post" ref="xxforms:instance('fr-form-instance')" replace="none"/>

    <!-- Call PDF service -->
    <xforms:submission id="fr-pdf-service-submission"
        resource="/fr/service/{$app}/{$form}/pdf/{$document}?fr-language={xxforms:instance('fr-language-instance')}{if (property('xxforms:noscript')) then '&amp;fr-noscript=true' else ''}"
        relevant="false" validate="false" method="post" ref="xxforms:instance('fr-form-instance')"
        replace="instance" instance="fr-workflow-send-instance"/>

    <xforms:instance id="fr-workflow-send-instance">
        <uri/>
    </xforms:instance>

    <!-- Mark all active alerts as visited -->
    <xxforms:script ev:event="fr-visit-alerts">
        <![CDATA[
        var rootElement = ORBEON.util.Dom.get("fr-form");
        var elements = YAHOO.util.Dom.getElementsByClassName("xforms-alert-active", "label", rootElement);
        for (var i = 0; i < elements.length; i++) {
            var element = elements[i];
            YAHOO.util.Dom.addClass(element, "xforms-alert-active-visited")
        }
        ]]>
    </xxforms:script>

    <!-- React to issue loading the document. We consider this fatal. -->
    <xforms:action ev:event="xforms-submit-error" ev:target="fr-get-document-submission" type="xpath">
        formRunner:sendError((event('response-status-code'), 500)[1])
    </xforms:action>

    <!-- React to failed submission -->
    <xforms:action ev:event="xforms-submit-error"
                   ev:target="fr-create-update-submission fr-create-update-attachment-submission fr-get-document-submission fr-pdf-service-submission fr-email-service-submission">
        <xforms:dispatch name="fr-submit-error" targetid="fr-persistence-model">
            <xxforms:context name="submission-id" select="event('xxforms:targetid')"/>
            <xxforms:context name="response-body" select="event('response-body')"/>
            <xxforms:context name="error-type" select="event('error-type')"/>
        </xforms:dispatch>
    </xforms:action>

    <xforms:action ev:event="fr-submit-error">
        <!-- Remember there was an error -->
        <xforms:setvalue ref="instance('fr-persistence-instance')/error" value="event('response-body')"/>
        <xforms:setvalue ref="instance('fr-persistence-instance')/is-error">true</xforms:setvalue>
        <!-- Log error -->
        <xforms:message level="xxforms:log-debug">Error with submission: <xforms:output value="event('submission-id')"/></xforms:message>
        <xforms:message level="xxforms:log-debug"><xforms:output value="event('response-body')"/></xforms:message>

        <!-- case validation-error => set error message and show validation error section in UI -->
        <xforms:action if="event('error-type') = 'validation-error'">
            <xforms:setvalue ref="instance('fr-persistence-instance')/message"
                             model="fr-resources-model" value="$fr-fr-resources/detail/messages/form-validation-error"/>
            <xforms:toggle case="fr-message-validation-error"/>
            <!-- Mark all active alerts as visited -->
            <xforms:dispatch name="fr-visit-alerts" target="fr-persistence-model"/>
            <!-- Open all sections -->
            <xforms:dispatch name="fr-expand-all" target="fr-sections-model"/>
        </xforms:action>

        <!-- case xxforms-pending-uploads => display a modal message -->
        <xforms:action if="event('error-type') = 'xxforms-pending-uploads'">
            <xforms:message model="fr-resources-model" value="$fr-fr-resources/detail/messages/upload-in-progress"/>
        </xforms:action>

        <!-- case _ => set error message and show fatal error section in UI -->
        <xforms:action if="not(event('error-type') = ('validation-error', 'xxforms-pending-uploads'))">
            <xforms:setvalue ref="instance('fr-persistence-instance')/message"
                             model="fr-resources-model" value="$fr-fr-resources/detail/messages/database-error"/>
            <xforms:toggle case="fr-message-fatal-error"/>

            <!-- Call error submission if defined -->
            <xforms:send if="$workflow-error-uri != ''" submission="fr-workflow-error-submission"/>

        </xforms:action>
    </xforms:action>

    <!-- React to instance mutation events -->
    <xforms:action ev:observer="fr-form-instance" ev:event="xforms-insert xforms-delete xxforms-value-changed">
        <!-- In 'new' and 'edit' modes only, mark status as dirty if data changes -->
        <xforms:setvalue if="$mode = ('new', 'edit')" ref="instance('fr-persistence-instance')/data-status">dirty</xforms:setvalue>
    </xforms:action>

    <!-- Clear message upon DOMFocusIn on #fr-form-group -->
    <xforms:action ev:observer="fr-view" ev:event="DOMFocusIn">
        <xforms:toggle case="fr-message-none"/>
        <xforms:setvalue ref="instance('fr-persistence-instance')/message"/>
        <xforms:setvalue ref="instance('fr-persistence-instance')/error"/>
    </xforms:action>

</xforms:model>
