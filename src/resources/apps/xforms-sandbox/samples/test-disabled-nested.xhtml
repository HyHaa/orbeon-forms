<xhtml:html xmlns:xforms="http://www.w3.org/2002/xforms"
    xmlns:f="http://orbeon.org/oxf/xml/formatting" xmlns:xhtml="http://www.w3.org/1999/xhtml"
    xmlns:xxforms="http://orbeon.org/oxf/xml/xforms" xmlns:widget="http://orbeon.org/oxf/xml/widget"
    xmlns:ev="http://www.w3.org/2001/xml-events" xmlns:xs="http://www.w3.org/2001/XMLSchema"
    xmlns:xbl="http://www.w3.org/ns/xbl" xmlns:xxbl="http://orbeon.org/oxf/xml/xbl"
    xmlns:fr="http://orbeon.org/oxf/xml/form-runner">

    <xhtml:head>
        <xhtml:title>Nested disabled</xhtml:title>
        <xhtml:link type="text/css" rel="stylesheet" href="/ops/yui/logger/assets/logger.css"/>
        <xhtml:script type="text/javascript" src="/ops/yui/logger/logger.js"/>
        <xhtml:script type="text/javascript" src="/ops/yui/event-simulate/event-simulate.js"/>
        <xhtml:script type="text/javascript" src="/ops/yui/yuitest/yuitest.js"/>
        <xhtml:script type="text/javascript">
            <![CDATA[
                YAHOO.tool.TestRunner.add(new YAHOO.tool.TestCase({

                    name: "Nested disabled",

                    /**
                     * For both groups and cases, when not shown, any form field inside the group or case should
                     * have the disabled attribute set, so it can't be reached by tabbing.
                     */
                    testDisabledOnInputs: function() {
                        var YA = YAHOO.util.Assert;

                        /**
                         * Assert that inputs in the groups/cases have the disabled attribute set or not set, as specified
                         * by the attributes.
                         */
                        function assertInputDisabled(outerDisabled, innerDisabled) {

                            function assertInputWorker(expected, groupOrCaseOrRepeat, innerOrOuter, index) {
                                var inputControlId = groupOrCaseOrRepeat + "-" + innerOrOuter + "-input" + index;
                                var control = YAHOO.util.Dom.get(inputControlId);
                                if (control == null) {
                                    YA.isTrue(expected, "can't find input id " + inputControlId + " (should be there as it is expected to be relevant)");
                                } else {
                                    var input = control.getElementsByTagName("input")[0];
                                    var message = "input " + inputControlId  + " has not expected disabled state";
                                    if (expected != input.disabled) { console.log(input); }
                                    YA.areEqual(expected, input.disabled, message);
                                }
                            }

                            function assertButtonWorker(expected, id) {
                                var buttonControl = YAHOO.util.Dom.get(id);
                                if (buttonControl == null) {
                                    YA.isTrue(expected, "can't find button id " + id + " (should be there as it is expected to be relevant)");
                                } else {
                                    var htmlButton = buttonControl.getElementsByTagName("button")[0];
                                    YA.areEqual(expected, htmlButton.disabled, "button " + id + " has not the expected disabled state");
                                }
                            }

                            assertInputWorker(outerDisabled, "group-nested", "outer", "-1");
                            assertInputWorker(outerDisabled, "group-nested", "outer", "-2");
                            assertInputWorker(innerDisabled, "group-nested", "inner", "");
                            assertInputWorker(outerDisabled, "repeat-iteration", "outer", "-1" + XFORMS_SEPARATOR_1 + "1");
                            assertInputWorker(outerDisabled, "repeat-iteration", "outer", "-2" + XFORMS_SEPARATOR_1 + "1");
                            assertInputWorker(innerDisabled, "repeat-iteration", "inner", XFORMS_SEPARATOR_1 + "1-1");
                            assertInputWorker(outerDisabled, "repeat-repeat", "outer", "-1" + XFORMS_SEPARATOR_1 + "1");
                            assertInputWorker(outerDisabled, "repeat-repeat", "outer", "-2" + XFORMS_SEPARATOR_1 + "1");
                            assertInputWorker(innerDisabled, "repeat-repeat", "inner", XFORMS_SEPARATOR_1 + "1-1");
                            assertInputWorker(outerDisabled, "case", "outer", "-1");
                            assertInputWorker(outerDisabled, "case", "outer", "-2");
                            assertInputWorker(innerDisabled, "case", "inner", "");
                            assertButtonWorker(outerDisabled, "group-nested-outer-button");
                            assertButtonWorker(outerDisabled, "group-flat-outer-button");
                            assertButtonWorker(outerDisabled, "repeat-iteration-outer-button" + XFORMS_SEPARATOR_1 + "1");
                            assertButtonWorker(outerDisabled, "repeat-repeat-outer-button" + XFORMS_SEPARATOR_1 + "1");
                            assertButtonWorker(outerDisabled, "case-outer-button");
                        }

                        // Initial state: everything is disabled
                        assertInputDisabled(true, true);
                        ORBEON.util.Test.executeSequenceCausingAjaxRequest(this, [[
                            // Enable just inner
                            function() { YAHOO.util.UserAction.click(document.getElementById("toggle-inner").getElementsByTagName("button")[0]); },
                            // Inputs in inner should still be disabled as outer is disabled
                            function() { assertInputDisabled(true, true); }
                        ], [
                            // Get back to the initial state where outer and inner are disabled
                            function() { YAHOO.util.UserAction.click(document.getElementById("toggle-inner").getElementsByTagName("button")[0]); },
                            // As at the beginning, everything should be disabled
                            function() { assertInputDisabled(true, true); }
                        ], [
                            // Enable just outer
                            function() { YAHOO.util.UserAction.click(document.getElementById("toggle-outer").getElementsByTagName("button")[0]); },
                            // Inputs in outer should be enabled and input in inner should still be disabled
                            function() { assertInputDisabled(false, true); }
                        ], [
                            // Enable inner
                            function() { YAHOO.util.UserAction.click(document.getElementById("toggle-inner").getElementsByTagName("button")[0]); },
                            // Now everything is enabled (that is pretty simple)
                            function() { assertInputDisabled(false, false); }
                        ], [
                            // Get back to the initial state where outer and inner are disabled
                            function() {
                                YAHOO.util.UserAction.click(document.getElementById("toggle-outer").getElementsByTagName("button")[0]);
                                YAHOO.util.UserAction.click(document.getElementById("toggle-inner").getElementsByTagName("button")[0]);
                            },
                            function() {}
                        ]
                        ]);
                    },

                    /**
                     * When a YUI button is built from a disabled button, YUI creates a disabled button. If the button is
                     * in a non-selected case, we need to make sure the YUI button is enabled when the case becomes
                     * selected.
                     */
                    testDisabledOnYUIButton: function() {

                        function assertButtonDisabled(groupOrCase) {
                            var yuiButton = YAHOO.util.Dom.getElementsByClassName("yui-button", null, groupOrCase + "-outer-button")[0];
                            YAHOO.util.Assert.isFalse(YAHOO.util.Dom.hasClass(yuiButton, "yui-button-disabled"), "yui button in " + groupOrCase + " must not be disabled");
                        }

                        ORBEON.util.Test.executeSequenceCausingAjaxRequest(this, [[
                            // Enable outer so button becomes visible
                            function() { YAHOO.util.UserAction.click(document.getElementById("toggle-outer").getElementsByTagName("button")[0]); },
                            // Buttons must not be disabled
                            function() { assertButtonDisabled("group"); assertButtonDisabled("case"); }
                        ], [
                            // Get back to the initial state where outer and inner are disabled
                            function() { YAHOO.util.UserAction.click(document.getElementById("toggle-outer").getElementsByTagName("button")[0]); },
                            function() {}
                        ]]);
                    }
                }));

//                ORBEON.xforms.Events.orbeonLoadedEvent.subscribe(function() {
//                    if (parent && parent.TestManager) {
//                        parent.TestManager.load();
//                    } else {
//                        new YAHOO.tool.TestLogger();
//                        YAHOO.tool.TestRunner.run();
//                    }
//                });
            ]]>
        </xhtml:script>
        <xhtml:style type="text/css">
            .xforms-label { width: 11em; display: inline-block; text-align: right; padding-right: 1em }
            .xforms-repeat-selected-item-1, .xforms-repeat-selected-item-2 { background-color: transparent }
        </xhtml:style>
        <xforms:model xmlns:xforms="http://www.w3.org/2002/xforms">
            <xforms:instance>
                <instance>
                    <enabled section="outer">false</enabled>
                    <enabled section="inner">false</enabled>
                    <input/>
                </instance>
            </xforms:instance>
            <xforms:bind ref="enabled" relevant=". = 'true'"/>
        </xforms:model>
    </xhtml:head>
    <xhtml:body>
        <xhtml:fieldset>
            <xhtml:legend>Actions</xhtml:legend>
            <xforms:group>
                <xforms:action ev:event="DOMActivate">
                    <xxforms:variable name="enabled" select="enabled[@section = (if(event('xxforms:targetid') = 'toggle-outer') then 'outer' else 'inner')]"/>
                    <xforms:setvalue ref="$enabled" value="if (. = 'true') then 'false' else 'true'"/>
                    <xforms:toggle case="{$enabled/@section}-{if ($enabled = 'true') then 'enabled' else 'disabled'}"/>
                </xforms:action>
                <fr:button id="toggle-outer">
                    <xforms:label>Toggle outer</xforms:label>
                </fr:button>
                <fr:button id="toggle-inner">
                    <xforms:label>Toggle inner</xforms:label>
                </fr:button>
            </xforms:group>
        </xhtml:fieldset>
        <xhtml:fieldset>
            <xhtml:legend>Groups nested</xhtml:legend>
            <xforms:group ref=".[enabled[@section = 'outer'] = 'true']" id="outer-group-nested">
                <xforms:input ref="input" id="group-nested-outer-input-1">
                    <xforms:label>Group nested outer 1</xforms:label>
                </xforms:input>
                <xforms:group ref=".[enabled[@section = 'inner'] = 'true']" id="inner-group-nested">
                    <xforms:input ref="input" id="group-nested-inner-input">
                        <xforms:label>Group nested inner</xforms:label>
                    </xforms:input>
                </xforms:group>
                <xforms:input ref="input" id="group-nested-outer-input-2">
                    <xforms:label>Group nested outer 2</xforms:label>
                </xforms:input>
                <fr:button id="group-nested-outer-button">
                    <xforms:label>Button</xforms:label>
                </fr:button>
            </xforms:group>
        </xhtml:fieldset>
        <xhtml:fieldset>
            <xhtml:legend>Groups flat</xhtml:legend>
            <xhtml:table>
                <xhtml:tr>
                    <xforms:group ref=".[enabled[@section = 'outer'] = 'true']" id="outer-group-flat">
                        <xhtml:td>
                            <xforms:input ref="input" id="group-flat-outer-input-1">
                                <xforms:label>Group flat outer 1</xforms:label>
                            </xforms:input>
                        </xhtml:td>
                        <xforms:group ref=".[enabled[@section = 'inner'] = 'true']" id="inner-group-flat">
                            <xhtml:td>
                                <xforms:input ref="input" id="group-flat-inner-input">
                                    <xforms:label>Group flat inner</xforms:label>
                                </xforms:input>
                            </xhtml:td>
                        </xforms:group>
                        <xhtml:td>
                            <xforms:input ref="input" id="group-flat-outer-input-2">
                                <xforms:label>Group flat outer 2</xforms:label>
                            </xforms:input>
                        </xhtml:td>
                        <xhtml:td>
                            <fr:button id="group-flat-outer-button">
                                <xforms:label>Button</xforms:label>
                            </fr:button>
                        </xhtml:td>
                    </xforms:group>
                </xhtml:tr>
            </xhtml:table>
        </xhtml:fieldset>
        <xhtml:fieldset>
            <xhtml:legend>Repeats (iteration relevance)</xhtml:legend>
            <xforms:repeat nodeset="instance()/enabled[@section = 'outer']" id="outer-repeat-iteration">
                <xforms:input ref="instance()/input" id="repeat-iteration-outer-input-1">
                    <xforms:label>Repeat iteration outer 1</xforms:label>
                </xforms:input>
                <xforms:repeat nodeset="instance()/enabled[@section = 'inner']" id="inner-repeat-iteration">
                    <xforms:input ref="instance()/input" id="repeat-iteration-inner-input">
                        <xforms:label>Repeat iteration inner</xforms:label>
                    </xforms:input>
                </xforms:repeat>
                <xforms:input ref="instance()/input" id="repeat-iteration-outer-input-2">
                    <xforms:label>Repeat iteration outer 2</xforms:label>
                </xforms:input>
                <fr:button id="repeat-iteration-outer-button">
                    <xforms:label>Button</xforms:label>
                </fr:button>
            </xforms:repeat>
        </xhtml:fieldset>
        <xhtml:fieldset>
            <xhtml:legend>Repeats (repeat relevance)</xhtml:legend>
            <xforms:repeat nodeset="instance()[enabled[@section = 'outer'] = 'true']" id="outer-repeat-repeat">
                <xforms:input ref="instance()/input" id="repeat-repeat-outer-input-1">
                    <xforms:label>Repeat repeat outer 1</xforms:label>
                </xforms:input>
                <xforms:repeat nodeset="instance()[enabled[@section = 'inner'] = 'true']" id="inner-repeat-repeat">
                    <xforms:input ref="instance()/input" id="repeat-repeat-inner-input">
                        <xforms:label>Repeat repeat inner</xforms:label>
                    </xforms:input>
                </xforms:repeat>
                <xforms:input ref="instance()/input" id="repeat-repeat-outer-input-2">
                    <xforms:label>Repeat repeat outer 2</xforms:label>
                </xforms:input>
                <fr:button id="repeat-repeat-outer-button">
                    <xforms:label>Button</xforms:label>
                </fr:button>
            </xforms:repeat>
        </xhtml:fieldset>
        <xhtml:fieldset>
            <xhtml:legend>Cases</xhtml:legend>
            <xforms:switch>
                <xforms:case id="outer-disabled"/>
                <xforms:case id="outer-enabled">
                    <xforms:input ref="input" id="case-outer-input-1">
                        <xforms:label>Case outer 1</xforms:label>
                    </xforms:input>
                    <xforms:switch>
                        <xforms:case id="inner-disabled"/>
                        <xforms:case id="inner-enabled">
                            <xforms:input ref="input" id="case-inner-input">
                                <xforms:label>Case inner</xforms:label>
                            </xforms:input>
                        </xforms:case>
                    </xforms:switch>
                    <xforms:input ref="input" id="case-outer-input-2">
                        <xforms:label>Case outer 2</xforms:label>
                    </xforms:input>
                    <fr:button id="case-outer-button">
                        <xforms:label>Button</xforms:label>
                    </fr:button>
                </xforms:case>
            </xforms:switch>
        </xhtml:fieldset>
    </xhtml:body>
</xhtml:html>
