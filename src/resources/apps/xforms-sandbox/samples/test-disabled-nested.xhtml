<xhtml:html xmlns:xforms="http://www.w3.org/2002/xforms"
    xmlns:f="http://orbeon.org/oxf/xml/formatting" xmlns:xhtml="http://www.w3.org/1999/xhtml"
    xmlns:xxforms="http://orbeon.org/oxf/xml/xforms" xmlns:widget="http://orbeon.org/oxf/xml/widget"
    xmlns:ev="http://www.w3.org/2001/xml-events" xmlns:xs="http://www.w3.org/2001/XMLSchema"
    xmlns:xbl="http://www.w3.org/ns/xbl" xmlns:xxbl="http://orbeon.org/oxf/xml/xbl"
    xmlns:fr="http://orbeon.org/oxf/xml/form-runner">

    <xhtml:head>
        <xhtml:title>Nested disabled</xhtml:title>
        <xforms:model xmlns:xforms="http://www.w3.org/2002/xforms">
            <xforms:instance>
                <instance>
                    <enabled section="outer">false</enabled>
                    <enabled section="inner">false</enabled>
                    <input/>
                </instance>
            </xforms:instance>
        </xforms:model>

        <xhtml:link type="text/css" rel="stylesheet" href="/ops/yui/logger/assets/logger.css"/>
        <xhtml:script type="text/javascript" src="/ops/yui/logger/logger.js"/>
        <xhtml:script type="text/javascript" src="/ops/yui/yuitest/yuitest.js"/>
        <xhtml:script type="text/javascript">
            <![CDATA[
                YAHOO.tool.TestRunner.add(new YAHOO.tool.TestCase({

                    name: "XHTML Editor",

                    /**
                     * Assert that inputs in the groups/cases have the disabled attribute set or not set, as specified
                     * by the attributes.
                     */
                    assertInputDisabled: function(outerDisabled, innerDisabled) {
                        function assertWorker(expected, groupOrCase, innerOrOuter, index) {
                            var controlId = groupOrCase + "-" + innerOrOuter + "-input" + (innerOrOuter == "outer" ? "-" + index : "");
                            var input = YAHOO.util.Dom.get(controlId).getElementsByTagName("input")[0];
                            var message = innerOrOuter + " " + groupOrCase + " input" +  (innerOrOuter == "outer" ? " " + index : "") + " has not expected disabled state";
                            YAHOO.util.Assert.areEqual(expected, input.disabled, message);

                        }
                        assertWorker(outerDisabled, "group", "outer", "1");
                        assertWorker(outerDisabled, "group", "outer", "2");
                        assertWorker(outerDisabled, "case", "outer", "1");
                        assertWorker(outerDisabled, "case", "outer", "2");
                        assertWorker(innerDisabled, "group", "inner", null);
                        assertWorker(innerDisabled, "case", "inner", null);
                    },

                    /**
                     * For both groups and cases, when not shown, any form field inside the group or case should
                     * have the disabled attribute set, so it can't be reached by tabbing.
                     */
                    testDisabledOnInputs: function() {
                        // Initial state: everything is disabled
                        this.assertInputDisabled(true, true);
                        ORBEON.util.Test.executeSequenceCausingAjaxRequest(this, [[
                            // Enable just outer
                            function() { YAHOO.util.UserAction.click(document.getElementById("toggle-outer").getElementsByTagName("button")[0]); },
                            // Inputs in outer should be enabled and input in inner should still be disabled
                            function() { this.assertInputDisabled(false, true); }
                        ], [
                            // Enable inner
                            function() { YAHOO.util.UserAction.click(document.getElementById("toggle-inner").getElementsByTagName("button")[0]); },
                            // Now everything is enabled (that is pretty simple)
                            function() { this.assertInputDisabled(false, false); }
                        ], [
                            // Get back to the initial state where outer and inner are disabled
                            function() {
                                YAHOO.util.UserAction.click(document.getElementById("toggle-outer").getElementsByTagName("button")[0]);
                                YAHOO.util.UserAction.click(document.getElementById("toggle-inner").getElementsByTagName("button")[0]);
                            },
                            function() {}
                        ]]);
                    }
                }));

                ORBEON.xforms.Events.orbeonLoadedEvent.subscribe(function() {
                    if (parent && parent.TestManager) {
                        parent.TestManager.load();
                    } else {
                        new YAHOO.tool.TestLogger();
                        YAHOO.tool.TestRunner.run();
                    }
                });
            ]]>
        </xhtml:script>
    </xhtml:head>
    <xhtml:body>
        <xhtml:fieldset>
            <xhtml:legend>Actions</xhtml:legend>
            <xforms:group>
                <xforms:action ev:event="DOMActivate">
                    <xxforms:variable name="enabled" select="enabled[@section = (if(event('xxforms:targetid') = 'toggle-outer') then 'outer' else 'inner')]"/>
                    <xforms:setvalue ref="$enabled" value="if (. = 'true') then 'false' else 'true'"/>
                    <xforms:toggle case="{$enabled/@section}-{if ($enabled = 'true') then 'enabled' else 'disabled'}"/>
                </xforms:action>
                <fr:button id="toggle-outer">
                    <xforms:label>Toggle outer</xforms:label>
                </fr:button>
                <fr:button id="toggle-inner">
                    <xforms:label>Toggle inner</xforms:label>
                </fr:button>
            </xforms:group>
        </xhtml:fieldset>
        <xhtml:fieldset>
            <xhtml:legend>Nested groups</xhtml:legend>
            <xforms:group ref=".[enabled[@section = 'outer'] = 'true']" id="outer-group">
                <xforms:input ref="input" id="group-outer-input-1"/>
                <xforms:group ref=".[enabled[@section = 'inner'] = 'true']" id="inner-group">
                    <xforms:input ref="input" id="group-inner-input"/>
                </xforms:group>
                <xforms:input ref="input" id="group-outer-input-2"/>
            </xforms:group>
        </xhtml:fieldset>
        <xhtml:fieldset>
            <xhtml:legend>Nested cases</xhtml:legend>
            <xforms:switch>
                <xforms:case id="outer-disabled"/>
                <xforms:case id="outer-enabled">
                    <xforms:input ref="input" id="case-outer-input-1"/>
                    <xforms:switch>
                        <xforms:case id="inner-disabled"/>
                        <xforms:case id="inner-enabled">
                            <xforms:input ref="input" id="case-inner-input"/>
                        </xforms:case>
                    </xforms:switch>
                    <xforms:input ref="input" id="case-outer-input-2"/>
                </xforms:case>
            </xforms:switch>
        </xhtml:fieldset>
    </xhtml:body>
</xhtml:html>
